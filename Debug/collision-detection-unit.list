
collision-detection-unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb0  08001eb0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb0  08001eb0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb0  08001eb0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000064  08001f1c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001184  08001f1c  00021184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000047cf  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124f  00000000  00000000  00024863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a8  00000000  00000000  00025ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00025e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011535  00000000  00000000  00026120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007809  00000000  00000000  00037655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005635b  00000000  00000000  0003ee5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000951b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000124c  00000000  00000000  0009520c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001d8c 	.word	0x08001d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001d8c 	.word	0x08001d8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIOB_INIT>:
 * */

#define	AHB1ENR_GPIOBEN				(1U << 1)


void GPIOB_INIT(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	 * Enables clock access to GPIOB pin and sets it to input mode.
	 * */

	/* GPIOB is connected to AHB1 Bus*/

	RCC->AHB1ENR |= AHB1ENR_GPIOBEN; /* Enable clock access to GPIOB */
 8000284:	4b23      	ldr	r3, [pc, #140]	; (8000314 <GPIOB_INIT+0x94>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a22      	ldr	r2, [pc, #136]	; (8000314 <GPIOB_INIT+0x94>)
 800028a:	f043 0302 	orr.w	r3, r3, #2
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set bits 4 and 5 to zero in GPIOB MODER register to set GPIOB Pin 2 into input mode. */

	GPIOB->MODER &= ~(1U << 4);
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <GPIOB_INIT+0x98>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a20      	ldr	r2, [pc, #128]	; (8000318 <GPIOB_INIT+0x98>)
 8000296:	f023 0310 	bic.w	r3, r3, #16
 800029a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U << 5);
 800029c:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <GPIOB_INIT+0x98>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1d      	ldr	r2, [pc, #116]	; (8000318 <GPIOB_INIT+0x98>)
 80002a2:	f023 0320 	bic.w	r3, r3, #32
 80002a6:	6013      	str	r3, [r2, #0]
	 * Setting PB1,PB13,PB14,PB15 to output mode.
	 *
	 * */

	// set pin PB_1 to output mode
	GPIOB->MODER &= ~(1U << 3);
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <GPIOB_INIT+0x98>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <GPIOB_INIT+0x98>)
 80002ae:	f023 0308 	bic.w	r3, r3, #8
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 2);
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <GPIOB_INIT+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <GPIOB_INIT+0x98>)
 80002ba:	f043 0304 	orr.w	r3, r3, #4
 80002be:	6013      	str	r3, [r2, #0]


	// set pin PB_13 to output mode
	GPIOB->MODER &= ~(1U << 27);
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <GPIOB_INIT+0x98>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <GPIOB_INIT+0x98>)
 80002c6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 26);
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <GPIOB_INIT+0x98>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <GPIOB_INIT+0x98>)
 80002d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002d6:	6013      	str	r3, [r2, #0]

	// set pin PB_14 to output mode
	GPIOB->MODER &= ~(1U << 29);
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <GPIOB_INIT+0x98>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <GPIOB_INIT+0x98>)
 80002de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 28);
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <GPIOB_INIT+0x98>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <GPIOB_INIT+0x98>)
 80002ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ee:	6013      	str	r3, [r2, #0]

	// set pin PB_15 to output mode
	GPIOB->MODER &= ~(1U << 31);
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <GPIOB_INIT+0x98>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a08      	ldr	r2, [pc, #32]	; (8000318 <GPIOB_INIT+0x98>)
 80002f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002fa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=  (1U << 30);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <GPIOB_INIT+0x98>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <GPIOB_INIT+0x98>)
 8000302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000306:	6013      	str	r3, [r2, #0]


}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020400 	.word	0x40020400

0800031c <PB_1_HIGH>:

// 	Set GPIOB PIN1 TO HIGH
void PB_1_HIGH(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1U << 1);
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <PB_1_HIGH+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <PB_1_HIGH+0x1c>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6153      	str	r3, [r2, #20]
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40020400 	.word	0x40020400

0800033c <PB_1_LOW>:
// 	Set GPIOB PIN1 TO LOW
void PB_1_LOW(void){
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
	GPIOB-> ODR &= ~(1U << 1);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <PB_1_LOW+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <PB_1_LOW+0x1c>)
 8000346:	f023 0302 	bic.w	r3, r3, #2
 800034a:	6153      	str	r3, [r2, #20]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40020400 	.word	0x40020400

0800035c <car_init>:




void car_init(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	GPIOB_INIT();
 8000360:	f7ff ff8e 	bl	8000280 <GPIOB_INIT>
	proximity_sensor_init();
 8000364:	f000 f820 	bl	80003a8 <proximity_sensor_init>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <car_start>:

void car_start(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	PB_1_HIGH();
 8000370:	f7ff ffd4 	bl	800031c <PB_1_HIGH>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <car_stop>:


void car_stop(void){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	PB_1_LOW();
 800037c:	f7ff ffde 	bl	800033c <PB_1_LOW>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <GPIOB_PB2_READ>:
 *
 * */



uint32_t GPIOB_PB2_READ(void){
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	/*
	 * Reads from GPIOB PIN 2 and returns its value.
	 *
	 * */

	return (GPIOB->IDR & (1U << 2)) == 0;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <GPIOB_PB2_READ+0x20>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf0c      	ite	eq
 8000394:	2301      	moveq	r3, #1
 8000396:	2300      	movne	r3, #0
 8000398:	b2db      	uxtb	r3, r3

}
 800039a:	4618      	mov	r0, r3
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40020400 	.word	0x40020400

080003a8 <proximity_sensor_init>:

void proximity_sensor_init(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

	GPIOB_INIT();
 80003ac:	f7ff ff68 	bl	8000280 <GPIOB_INIT>

}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <get_proximity>:

uint8_t get_proximity(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	/* Returns 1 if the proximity sensor detects any object.  Else 0*/

	return GPIOB_PB2_READ();
 80003b8:	f7ff ffe4 	bl	8000384 <GPIOB_PB2_READ>
 80003bc:	4603      	mov	r3, r0
 80003be:	b2db      	uxtb	r3, r3
	 *
	 * As of now, I have no idea why these values are so specific.
	 *
	 *  */

}
 80003c0:	4618      	mov	r0, r3
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <EXTI15_10_IRQHandler>:

	__enable_irq();

}

void EXTI15_10_IRQHandler(void){
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

	EXTI->PR |= EXTI_PR13;
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <EXTI15_10_IRQHandler+0x1c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <EXTI15_10_IRQHandler+0x1c>)
 80003ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d2:	6153      	str	r3, [r2, #20]


}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40013c00 	.word	0x40013c00

080003e4 <LED_INIT>:
#include "LED.h"

#define GPIOAEN		(1U << 0) /* GPIOA Clock Access Enable Bit */
#define LED_PIN		(1U << 5) /* Using Pin 5 in GPIOA as LED_PIN */

void LED_INIT(void){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	RCC -> AHB1ENR |= GPIOAEN; /* Enable clock access to GPIOA */
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <LED_INIT+0x34>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <LED_INIT+0x34>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30

	/* set pin 5 in GPIOA as output pin */
	GPIOA -> MODER |= (1U << 10);
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <LED_INIT+0x38>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a08      	ldr	r2, [pc, #32]	; (800041c <LED_INIT+0x38>)
 80003fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER &= ~(1U << 11);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LED_INIT+0x38>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a05      	ldr	r2, [pc, #20]	; (800041c <LED_INIT+0x38>)
 8000406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800040a:	6013      	str	r3, [r2, #0]

}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40023800 	.word	0x40023800
 800041c:	40020000 	.word	0x40020000

08000420 <LED_ON>:

void LED_ON(void){
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

	GPIOA -> ODR |= LED_PIN; /* Set LED_PIN high in GPIOA's output data register */
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <LED_ON+0x1c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <LED_ON+0x1c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6153      	str	r3, [r2, #20]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40020000 	.word	0x40020000

08000440 <LED_OFF>:

void LED_OFF(void){
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	// set LED pin LOW

	GPIOA -> ODR &= ~LED_PIN; /* Set LED_PIN low in GPIOA's output data register */
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <LED_OFF+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <LED_OFF+0x1c>)
 800044a:	f023 0320 	bic.w	r3, r3, #32
 800044e:	6153      	str	r3, [r2, #20]

}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40020000 	.word	0x40020000

08000460 <__io_putchar>:
uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
void uart_write(int ch);
void uart_tx_init(void);


int __io_putchar(int ch){ /* defined in syscalls.c */
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

	uart_write(ch);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f855 	bl	8000518 <uart_write>

	return ch;
 800046e:	687b      	ldr	r3, [r7, #4]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <UART_INIT>:


void UART_INIT(void){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	uart_tx_init();
 800047c:	f000 f802 	bl	8000484 <uart_tx_init>
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <uart_tx_init>:

void uart_tx_init(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0


	RCC -> AHB1ENR |= GPIOAEN; /* enable clock access to GPIOA */
 8000488:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <uart_tx_init+0x84>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <uart_tx_init+0x84>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6313      	str	r3, [r2, #48]	; 0x30

	/* set Pin 2 in GPIOA to alternate function mode */
	GPIOA -> MODER &= ~(1U << 4);
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <uart_tx_init+0x88>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <uart_tx_init+0x88>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |=  (1U << 5);
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <uart_tx_init+0x88>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a19      	ldr	r2, [pc, #100]	; (800050c <uart_tx_init+0x88>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6013      	str	r3, [r2, #0]

	/* set alternate function type to AF07 (uart2_tx) */
	GPIOA -> AFR[0] |=  (1U << 8);
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <uart_tx_init+0x88>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	4a16      	ldr	r2, [pc, #88]	; (800050c <uart_tx_init+0x88>)
 80004b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b6:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 9);
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <uart_tx_init+0x88>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a13      	ldr	r2, [pc, #76]	; (800050c <uart_tx_init+0x88>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c2:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] |=  (1U << 10);
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <uart_tx_init+0x88>)
 80004c6:	6a1b      	ldr	r3, [r3, #32]
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <uart_tx_init+0x88>)
 80004ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ce:	6213      	str	r3, [r2, #32]
	GPIOA -> AFR[0] &= ~(1U << 11);
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <uart_tx_init+0x88>)
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <uart_tx_init+0x88>)
 80004d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004da:	6213      	str	r3, [r2, #32]

	RCC -> APB1ENR |= UART2EN; /* enable clock access to UART2 */
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <uart_tx_init+0x84>)
 80004de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <uart_tx_init+0x84>)
 80004e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e6:	6413      	str	r3, [r2, #64]	; 0x40

	set_uart_baudrate(APB1_CLK, UART_BAUDRATE); /* configure UART baudrate) */
 80004e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <uart_tx_init+0x8c>)
 80004ee:	f000 f82b 	bl	8000548 <set_uart_baudrate>

	USART2 -> CR1 = CR1_TE; /* configure transfer direction */
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <uart_tx_init+0x90>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	60da      	str	r2, [r3, #12]

	USART2 -> CR1 |= CR1_UE; /* enable UART module */
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <uart_tx_init+0x90>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <uart_tx_init+0x90>)
 80004fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000502:	60d3      	str	r3, [r2, #12]

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40023800 	.word	0x40023800
 800050c:	40020000 	.word	0x40020000
 8000510:	00f42400 	.word	0x00f42400
 8000514:	40004400 	.word	0x40004400

08000518 <uart_write>:

void uart_write(int ch){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]


	while(!(USART2 -> SR & SR_TXE)){} /* Wait until transmit data register is empty */
 8000520:	bf00      	nop
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <uart_write+0x2c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <uart_write+0xa>

	/* write to transmit data register */

	USART2 -> DR = (ch & 0xFF); /* set only 8 bits as the remaining bits are reserved. (read datasheet) */
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <uart_write+0x2c>)
 8000532:	b2db      	uxtb	r3, r3
 8000534:	6053      	str	r3, [r2, #4]



}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40004400 	.word	0x40004400

08000548 <set_uart_baudrate>:

void set_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	USART2 -> BRR = compute_uart_baudrate(periph_clk, baudrate);
 8000552:	4c05      	ldr	r4, [pc, #20]	; (8000568 <set_uart_baudrate+0x20>)
 8000554:	6839      	ldr	r1, [r7, #0]
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f808 	bl	800056c <compute_uart_baudrate>
 800055c:	4603      	mov	r3, r0
 800055e:	60a3      	str	r3, [r4, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	40004400 	.word	0x40004400

0800056c <compute_uart_baudrate>:

uint32_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	085a      	lsrs	r2, r3, #1
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	441a      	add	r2, r3
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <__init__>:


#include "init.h"


void __init__(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	/* Initialise drivers according to the flags defined in config/config.h */

	if(__LED_INIT__ == 0x1){
		LED_INIT();
 8000594:	f7ff ff26 	bl	80003e4 <LED_INIT>
	}
	if(__UART_INIT__ == 0x1){
		UART_INIT();
 8000598:	f7ff ff6e 	bl	8000478 <UART_INIT>



	/* Initialise the kernel */

	kernel_init();
 800059c:	f000 f830 	bl	8000600 <kernel_init>


}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	db0a      	blt.n	80005ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	490c      	ldr	r1, [pc, #48]	; (80005f0 <__NVIC_SetPriority+0x4c>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	0112      	lsls	r2, r2, #4
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	440b      	add	r3, r1
 80005c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005cc:	e00a      	b.n	80005e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4908      	ldr	r1, [pc, #32]	; (80005f4 <__NVIC_SetPriority+0x50>)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f003 030f 	and.w	r3, r3, #15
 80005da:	3b04      	subs	r3, #4
 80005dc:	0112      	lsls	r2, r2, #4
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	440b      	add	r3, r1
 80005e2:	761a      	strb	r2, [r3, #24]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000e100 	.word	0xe000e100
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <_loop_>:
		ICSR |= ICSR_PENDSTSET; /* trigger SysTick */

}


void _loop_(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	/*
	 * If no threads are given, __current_ptr__ shall point at this function and run here until 'something' is done ;)
	 * */
	while(1){}
 80005fc:	e7fe      	b.n	80005fc <_loop_+0x4>
	...

08000600 <kernel_init>:
}

void kernel_init(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0

	/* Semaphore initialisation*/

	semaphore_init(&LED_sem,  1);
 8000604:	2101      	movs	r1, #1
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <kernel_init+0x68>)
 8000608:	f000 f9b1 	bl	800096e <semaphore_init>
	semaphore_init(&UART_sem, 1);
 800060c:	2101      	movs	r1, #1
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <kernel_init+0x6c>)
 8000610:	f000 f9ad 	bl	800096e <semaphore_init>
	semaphore_init(&ADC1_sem, 1);
 8000614:	2101      	movs	r1, #1
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <kernel_init+0x70>)
 8000618:	f000 f9a9 	bl	800096e <semaphore_init>
	semaphore_init(&TIM2_sem, 1);
 800061c:	2101      	movs	r1, #1
 800061e:	4815      	ldr	r0, [pc, #84]	; (8000674 <kernel_init+0x74>)
 8000620:	f000 f9a5 	bl	800096e <semaphore_init>

	/* -- */
	MILLIS_PRESCALER = (BUS_FREQ/1000); /*  for scaling milliseconds relative to the clock frequency.  */
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <kernel_init+0x78>)
 8000626:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800062a:	601a      	str	r2, [r3, #0]

	sys_counter = 0; /* reset */
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <kernel_init+0x7c>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]

	min_thread_id = 0;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <kernel_init+0x80>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	max_thread_id = MAX_THREADS - 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <kernel_init+0x84>)
 800063a:	2204      	movs	r2, #4
 800063c:	601a      	str	r2, [r3, #0]


	min_periodic_thread_id = MAX_THREADS;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <kernel_init+0x88>)
 8000640:	2205      	movs	r2, #5
 8000642:	601a      	str	r2, [r3, #0]
	max_periodic_thread_id = MAX_THREADS + MAX_PERIODIC_THREADS - 1;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <kernel_init+0x8c>)
 8000646:	2209      	movs	r2, #9
 8000648:	601a      	str	r2, [r3, #0]

	recently_added_thread_id = min_thread_id - 1; /* no threads active currently */
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <kernel_init+0x80>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <kernel_init+0x90>)
 8000652:	6013      	str	r3, [r2, #0]
	recently_added_periodic_thread_id = min_periodic_thread_id - 1; /* no periodic threads active currently */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <kernel_init+0x88>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <kernel_init+0x94>)
 800065c:	6013      	str	r3, [r2, #0]

	__current_ptr__ = NULL;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <kernel_init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000080 	.word	0x20000080
 800066c:	20000084 	.word	0x20000084
 8000670:	20000088 	.word	0x20000088
 8000674:	2000008c 	.word	0x2000008c
 8000678:	2000114c 	.word	0x2000114c
 800067c:	20001168 	.word	0x20001168
 8000680:	20001158 	.word	0x20001158
 8000684:	2000115c 	.word	0x2000115c
 8000688:	20001160 	.word	0x20001160
 800068c:	20001164 	.word	0x20001164
 8000690:	20001150 	.word	0x20001150
 8000694:	20001154 	.word	0x20001154
 8000698:	200001a8 	.word	0x200001a8

0800069c <stk_init>:

void stk_init(uint32_t thread_id){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

		__tcbs__[thread_id].stackptr = &TCB_STACK[thread_id][STACK_SIZE-16]; /* init stack pointer */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <stk_init+0x50>)
 80006b4:	1899      	adds	r1, r3, r2
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <stk_init+0x54>)
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4403      	add	r3, r0
 80006c4:	6019      	str	r1, [r3, #0]


		TCB_STACK[thread_id][STACK_SIZE-1] = (1U << 24); /* enable 24th bit in PSR to activate thumb mode */
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <stk_init+0x50>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80006ce:	fb01 f303 	mul.w	r3, r1, r3
 80006d2:	4413      	add	r3, r2
 80006d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80006d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006dc:	601a      	str	r2, [r3, #0]


			(FOR DEBUGGING PURPOSES)
		*/

}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	200001ac 	.word	0x200001ac
 80006f0:	20000090 	.word	0x20000090

080006f4 <kernel_launch>:

void kernel_launch(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
		 *
		 * */



		SysTick -> CTRL = CTRL_RESET; /* reset SysTick */
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <kernel_launch+0x6c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
		SysTick -> VAL = 0; /* clear SysTick current value register */
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <kernel_launch+0x6c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
		SysTick -> LOAD = (quanta * MILLIS_PRESCALER - 1); /* Load the quanta factored into milliseconds into the SysTick LOAD register */
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <kernel_launch+0x70>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4613      	mov	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4413      	add	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <kernel_launch+0x6c>)
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]

		NVIC_SetPriority(SysTick_IRQn, SYSTICK_PRIO); /* Set SysTick to low-priority */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800071c:	f7ff ff42 	bl	80005a4 <__NVIC_SetPriority>
		NVIC_SetPriority(PendSV_IRQn,  PENDSV_PRIO); /* Set  PendSV to high-priority */
 8000720:	2100      	movs	r1, #0
 8000722:	f06f 0001 	mvn.w	r0, #1
 8000726:	f7ff ff3d 	bl	80005a4 <__NVIC_SetPriority>

		SysTick -> CTRL |= (CTRL_CLKSRC | CTRL_ENABLE); /* enable SysTick and select internal clock */
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <kernel_launch+0x6c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <kernel_launch+0x6c>)
 8000730:	f043 0305 	orr.w	r3, r3, #5
 8000734:	6013      	str	r3, [r2, #0]
		SysTick -> CTRL |= CTRL_TICKINT; /* Enable interrupts */
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <kernel_launch+0x6c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <kernel_launch+0x6c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000742:	b672      	cpsid	i
}
 8000744:	bf00      	nop
					 * All periodic threads rely on the TIM2_IRQHandler.
					 * Be very careful when modifying the value of __TIM2_INIT__ in config/config.h
					 *
					 * */

					tim2_1ms_interrupt_init();
 8000746:	f000 fa4f 	bl	8000be8 <tim2_1ms_interrupt_init>
		}


		if(__current_ptr__ == NULL){
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <kernel_launch+0x74>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d102      	bne.n	8000758 <kernel_launch+0x64>
			/* no threads specified, we spin in an infinite loop until processor is taken away */
			add_thread(&_loop_);
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <kernel_launch+0x78>)
 8000754:	f000 f80c 	bl	8000770 <add_thread>
		}

		scheduler_launch();
 8000758:	f000 f8ae 	bl	80008b8 <scheduler_launch>




}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	e000e010 	.word	0xe000e010
 8000764:	2000114c 	.word	0x2000114c
 8000768:	200001a8 	.word	0x200001a8
 800076c:	080005f9 	.word	0x080005f9

08000770 <add_thread>:

tid_t add_thread(void (*thread)(void)){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(recently_added_thread_id == max_thread_id){
 8000778:	4b48      	ldr	r3, [pc, #288]	; (800089c <add_thread+0x12c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <add_thread+0x130>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d10a      	bne.n	800079a <add_thread+0x2a>
		fprintf(stderr,"Cannot add thread %p, max thread limit reached",&thread);
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <add_thread+0x134>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	1d3a      	adds	r2, r7, #4
 800078c:	4946      	ldr	r1, [pc, #280]	; (80008a8 <add_thread+0x138>)
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fb4a 	bl	8000e28 <fiprintf>
		exit(__ADD_THREAD_FAILURE__);
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fb33 	bl	8000e00 <exit>
	}

	uint32_t thread_id = recently_added_thread_id + 1; /* thread_id for the thread we are going to add */
 800079a:	4b40      	ldr	r3, [pc, #256]	; (800089c <add_thread+0x12c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80007a2:	b672      	cpsid	i
}
 80007a4:	bf00      	nop

	__disable_irq(); /* Disable global interrupts */

	__tcbs__[thread_id].sleeptime = 0;
 80007a6:	4941      	ldr	r1, [pc, #260]	; (80008ac <add_thread+0x13c>)
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	4613      	mov	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	440b      	add	r3, r1
 80007b4:	3308      	adds	r3, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].thread_id = thread_id;
 80007ba:	493c      	ldr	r1, [pc, #240]	; (80008ac <add_thread+0x13c>)
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4613      	mov	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	1a9b      	subs	r3, r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	440b      	add	r3, r1
 80007c8:	330c      	adds	r3, #12
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].period = 0xffffffff; /* non periodic threads */
 80007ce:	4937      	ldr	r1, [pc, #220]	; (80008ac <add_thread+0x13c>)
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4613      	mov	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	440b      	add	r3, r1
 80007dc:	3310      	adds	r3, #16
 80007de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007e2:	601a      	str	r2, [r3, #0]
	__tcbs__[thread_id].status = THREAD_ACTIVE;
 80007e4:	4931      	ldr	r1, [pc, #196]	; (80008ac <add_thread+0x13c>)
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4613      	mov	r3, r2
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	440b      	add	r3, r1
 80007f2:	3314      	adds	r3, #20
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	__tcbs__[thread_id].periodic_task = NULL;
 80007f8:	492c      	ldr	r1, [pc, #176]	; (80008ac <add_thread+0x13c>)
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	4613      	mov	r3, r2
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	440b      	add	r3, r1
 8000806:	3318      	adds	r3, #24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]

	stk_init(thread_id); /* initialise the stack */
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f7ff ff45 	bl	800069c <stk_init>
	TCB_STACK[thread_id][STACK_SIZE - 2] = (uint32_t) thread;  /* set the program counter to thread function's address */
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <add_thread+0x140>)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800081e:	fb01 f303 	mul.w	r3, r1, r3
 8000822:	4413      	add	r3, r2
 8000824:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000828:	6018      	str	r0, [r3, #0]

	if(thread_id == 0){ 	/* If this is the first thread we are adding */
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d106      	bne.n	800083e <add_thread+0xce>
		__current_ptr__ = &__tcbs__[0];
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <add_thread+0x144>)
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <add_thread+0x13c>)
 8000834:	601a      	str	r2, [r3, #0]
		__tcbs__[0].next_thread = &__tcbs__[0];
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <add_thread+0x13c>)
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <add_thread+0x13c>)
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	e023      	b.n	8000886 <add_thread+0x116>
	}else{

		/*Threads are linked in a circular linked list fashion. */
		__tcbs__[thread_id].next_thread = __tcbs__[recently_added_thread_id].next_thread;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <add_thread+0x12c>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	491a      	ldr	r1, [pc, #104]	; (80008ac <add_thread+0x13c>)
 8000844:	4613      	mov	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	1a9b      	subs	r3, r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3304      	adds	r3, #4
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	4816      	ldr	r0, [pc, #88]	; (80008ac <add_thread+0x13c>)
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4613      	mov	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4403      	add	r3, r0
 8000860:	3304      	adds	r3, #4
 8000862:	6019      	str	r1, [r3, #0]
		__tcbs__[recently_added_thread_id].next_thread = &__tcbs__[thread_id];
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <add_thread+0x12c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	460b      	mov	r3, r1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	490e      	ldr	r1, [pc, #56]	; (80008ac <add_thread+0x13c>)
 8000874:	4419      	add	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <add_thread+0x13c>)
 8000878:	4613      	mov	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4403      	add	r3, r0
 8000882:	3304      	adds	r3, #4
 8000884:	6019      	str	r1, [r3, #0]

	}

	recently_added_thread_id = thread_id;
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <add_thread+0x12c>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800088c:	b662      	cpsie	i
}
 800088e:	bf00      	nop

	__enable_irq(); /* Enable global interrupts */


	return thread_id;
 8000890:	68fb      	ldr	r3, [r7, #12]

}
 8000892:	4618      	mov	r0, r3
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20001150 	.word	0x20001150
 80008a0:	2000115c 	.word	0x2000115c
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08001da4 	.word	0x08001da4
 80008ac:	20000090 	.word	0x20000090
 80008b0:	200001ac 	.word	0x200001ac
 80008b4:	200001a8 	.word	0x200001a8

080008b8 <scheduler_launch>:


#include "sched.h"


void scheduler_launch(void){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
	 *  		initialises the Stack Pointer,
	 *			Restores all the registers from memory
	 *
	 * */

		__asm("LDR R0,=__current_ptr__");/* Load address of __current_ptr__ into R0 */
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <scheduler_launch+0x2c>)
		__asm("LDR R2,[R0]");	/* Load R2 = __current_ptr__ */
 80008be:	6802      	ldr	r2, [r0, #0]
		__asm("LDR SP, [R2]");	/* Load SP from __current_ptr__-> stackptr */
 80008c0:	f8d2 d000 	ldr.w	sp, [r2]
		__asm("POP {R4-R11}");	/* Restore R4-R11 */
 80008c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("POP {R12}");		/* Restore R12 */
 80008c8:	f85d cb04 	ldr.w	ip, [sp], #4
		__asm("POP {R0-R3}");	/* Restore R0-R3 */
 80008cc:	bc0f      	pop	{r0, r1, r2, r3}
		__asm("ADD SP,SP,#4");	/* Skip LR */
 80008ce:	b001      	add	sp, #4
		__asm("POP {LR}");		/* create a new stop location by popping LR */
 80008d0:	f85d eb04 	ldr.w	lr, [sp], #4
		__asm("ADD SP,SP,#4"); 	/* Skip PSR by adding 4 to SP */
 80008d4:	b001      	add	sp, #4
		__asm("CPSIE I"); 		/* Enable global interrupts */
 80008d6:	b662      	cpsie	i
		__asm("BX LR");			/* Return from exception */
 80008d8:	4770      	bx	lr

}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200001a8 	.word	0x200001a8

080008e8 <PendSV_Handler>:

	/* PendSV_Handler shall be handling the context switch process
	 * in the future versions of the RTOS.
	 */

}
 80008e8:	bf00      	nop
	...

080008ec <SysTick_Handler>:
		 *	-> Restore all the Registers.
		 * */

		/* SUSPEND CURRENT THREAD */

		__asm("CPSID I");		/* disable global interrupts */
 80008ec:	b672      	cpsid	i
		__asm("PUSH {R4-R11}");	/* save r4-r11 into the stack */
 80008ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("LDR R0 ,=__current_ptr__");	/* load address of __current_ptr__ into r0 */
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <SysTick_Handler+0x20>)
		__asm("LDR R1,[R0]");		/* load r1 from address stored in r0 i.e. r1 = __current_ptr__*/
 80008f4:	6801      	ldr	r1, [r0, #0]
		__asm("STR SP,[R1]");		/* store SP into r1 i.e. add SP to TCB*/
 80008f6:	f8c1 d000 	str.w	sp, [r1]


		/* CHOOSE NEXT THREAD */

		__asm("LDR R1,[R1,#4]");		/* load r1 from 4 bytes above r1 i.e. r1 = __current_ptr__->next */
 80008fa:	6849      	ldr	r1, [r1, #4]
		__asm("STR R1,[R0]");			/* store r1 at address equals r0 i.e. __current_ptr__ = r1 */
 80008fc:	6001      	str	r1, [r0, #0]
		__asm("LDR SP,[R1]");			/* update SP from address of r1 i.e. SP = cur__current_ptr__rentptr-> stackptr */
 80008fe:	f8d1 d000 	ldr.w	sp, [r1]
		__asm("POP {R4-R11}");			/* restore r4-r11 */
 8000902:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
		__asm("CPSIE I");				/* enable global interrupts */
 8000906:	b662      	cpsie	i
		__asm("BX LR");					/* return from exception and restore r0,r1,r2,r3,sp,lr,pc,psr */
 8000908:	4770      	bx	lr


		//	ICSR |= ICSR_PENDSVSET; /* Trigger the PendSV interrupt handler to perform the context switch.*/
}
 800090a:	bf00      	nop
 800090c:	200001a8 	.word	0x200001a8

08000910 <semaphore_give>:
 * Waiting for a semaphore gives back the CPU instead of wasting clock-cycles in a spin lock.
 *
 * */


void semaphore_give(uint32_t * sem){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
	__disable_irq();
	*sem += 1;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000926:	b662      	cpsie	i
}
 8000928:	bf00      	nop
	__enable_irq();

}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <semaphore_wait>:
void semaphore_wait(uint32_t * sem){
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
}
 8000940:	bf00      	nop
	__disable_irq();

	while(*sem <= 0){
 8000942:	e003      	b.n	800094c <semaphore_wait+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000948:	b662      	cpsie	i
}
 800094a:	bf00      	nop
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f7      	beq.n	8000944 <semaphore_wait+0xe>

//		cpu_yeild(); /* give back the CPU */

		__enable_irq();
	}
	*sem -= 1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800095e:	b662      	cpsie	i
}
 8000960:	bf00      	nop

	__enable_irq();
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <semaphore_init>:
void semaphore_init(uint32_t * sem, uint32_t value){
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
	*sem = value;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <t>:
#include "car-unit-src/cu.h"
#include "drivers/UART/UART.h"

int x = 0;

void t(void){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	while(1){
		x = get_proximity();
 8000990:	f7ff fd10 	bl	80003b4 <get_proximity>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <t+0x2c>)
 800099a:	601a      	str	r2, [r3, #0]
		if(x){
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <t+0x2c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d004      	beq.n	80009ae <t+0x22>
			car_start();
 80009a4:	f7ff fce2 	bl	800036c <car_start>
			osLEDOn();
 80009a8:	f000 f9de 	bl	8000d68 <osLEDOn>
 80009ac:	e7f0      	b.n	8000990 <t+0x4>
		}else{
			car_stop();
 80009ae:	f7ff fce3 	bl	8000378 <car_stop>
			osLEDOff();
 80009b2:	f000 f9e7 	bl	8000d84 <osLEDOff>
		x = get_proximity();
 80009b6:	e7eb      	b.n	8000990 <t+0x4>
 80009b8:	2000116c 	.word	0x2000116c

080009bc <main>:
		}
	}
}

int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	 * */




	__init__(); /* ysRTOS initialisation */
 80009c0:	f7ff fde6 	bl	8000590 <__init__>

	/*  */



	car_init();
 80009c4:	f7ff fcca 	bl	800035c <car_init>

//	car_start();


	osAddThread(&t);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <main+0x1c>)
 80009ca:	f000 f9a9 	bl	8000d20 <osAddThread>

	kernel_launch();
 80009ce:	f7ff fe91 	bl	80006f4 <kernel_launch>
 80009d2:	2300      	movs	r3, #0


}
 80009d4:	4618      	mov	r0, r3
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	0800098d 	.word	0x0800098d

080009dc <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009e6:	f000 fa05 	bl	8000df4 <__errno>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2216      	movs	r2, #22
 80009ee:	601a      	str	r2, [r3, #0]
  return -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_exit>:

void _exit (int status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe7 	bl	80009dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a0e:	e7fe      	b.n	8000a0e <_exit+0x12>

08000a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
  }

  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e009      	b.n	8000a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fcfb 	bl	8000460 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf1      	blt.n	8000a5c <_write+0x12>
  }
  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_close>:

int _close(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	605a      	str	r2, [r3, #4]
  return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <_isatty>:

int _isatty(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <_sbrk+0x5c>)
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <_sbrk+0x60>)
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <_sbrk+0x64>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_sbrk+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d207      	bcs.n	8000b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b1c:	f000 f96a 	bl	8000df4 <__errno>
 8000b20:	4603      	mov	r3, r0
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20020000 	.word	0x20020000
 8000b4c:	00000400 	.word	0x00000400
 8000b50:	20001170 	.word	0x20001170
 8000b54:	20001188 	.word	0x20001188

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <tim2_1ms_interrupt_init>:

/*	Interrupt Control and State Register	*/
#define	ICSR				*((volatile uint32_t * ) 0xE000ED04)
#define ICSR_PENDSTSET		(1U << 26)		/* SysTick Exception pending bit */

void tim2_1ms_interrupt_init(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	 * Every time the interrupt is generated, TIM2_IRQHandler is called.
	 *
	 * */


	RCC -> APB1ENR |= TIM2EN; /*enable clock access to tim2*/
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <tim2_1ms_interrupt_init+0x54>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <tim2_1ms_interrupt_init+0x54>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->PSC = 1600 - 1;	 /*Set timer prescaler*/
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10 - 1;	 	/*Set auto-reload value*/
 8000c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c06:	2209      	movs	r2, #9
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;			 /*clear counter*/
 8000c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = CR1_CEN;     /*Enable TIM2*/
 8000c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
	TIM2->DIER |= DIER_UIE;	 /*Enable timer interrupt*/
 8000c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); /*Enable timer interrupt in NVIC*/
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f7ff ff94 	bl	8000b58 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn,TIM2_PRIO);
 8000c30:	2107      	movs	r1, #7
 8000c32:	201c      	movs	r0, #28
 8000c34:	f7ff ffae 	bl	8000b94 <__NVIC_SetPriority>


}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ /* TIM2 Interrupt Handler */
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	sys_counter = (sys_counter + 1) % ticks_in_1ms; /* Increment this at every millisecond passed */
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <TIM2_IRQHandler+0xc8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <TIM2_IRQHandler+0xcc>)
 8000c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c52:	0a9b      	lsrs	r3, r3, #10
 8000c54:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <TIM2_IRQHandler+0xc8>)
 8000c60:	6013      	str	r3, [r2, #0]

	TIM2->SR &= ~SR_UIF;	/* clear update interrupt flag */
 8000c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6c:	f023 0301 	bic.w	r3, r3, #1
 8000c70:	6113      	str	r3, [r2, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop

	__disable_irq();

	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <TIM2_IRQHandler+0xd0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	e038      	b.n	8000cf0 <TIM2_IRQHandler+0xb0>
		 * thread and assign the periodic thread the processor.
		 *
		 * This thread shall run for time-period specified to the Round-Robin Scheduler.
		 *
		 * */
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000c7e:	4925      	ldr	r1, [pc, #148]	; (8000d14 <TIM2_IRQHandler+0xd4>)
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d12a      	bne.n	8000cea <TIM2_IRQHandler+0xaa>
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000c94:	491f      	ldr	r1, [pc, #124]	; (8000d14 <TIM2_IRQHandler+0xd4>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	1a9b      	subs	r3, r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3310      	adds	r3, #16
 8000ca4:	681b      	ldr	r3, [r3, #0]
		if((__tcbs__[current_thread_id].status == THREAD_ACTIVE) &&
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d01f      	beq.n	8000cea <TIM2_IRQHandler+0xaa>
		   (sys_counter % __tcbs__[current_thread_id].period == 0)){
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <TIM2_IRQHandler+0xc8>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4819      	ldr	r0, [pc, #100]	; (8000d14 <TIM2_IRQHandler+0xd4>)
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4403      	add	r3, r0
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8000cc4:	fb01 f303 	mul.w	r3, r1, r3
 8000cc8:	1ad3      	subs	r3, r2, r3
		   (__tcbs__[current_thread_id].period != 0)             &&		/* to avoid division by zero */
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10d      	bne.n	8000cea <TIM2_IRQHandler+0xaa>

				SysTick->VAL = SysTick->LOAD;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <TIM2_IRQHandler+0xd8>)
 8000cd0:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <TIM2_IRQHandler+0xd8>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	6093      	str	r3, [r2, #8]
				__tcbs__[current_thread_id].periodic_task();
 8000cd6:	490f      	ldr	r1, [pc, #60]	; (8000d14 <TIM2_IRQHandler+0xd4>)
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4798      	blx	r3
			current_thread_id++)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
			current_thread_id <= max_periodic_thread_id;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <TIM2_IRQHandler+0xdc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
	for(uint32_t current_thread_id =  min_periodic_thread_id;
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d9c1      	bls.n	8000c7e <TIM2_IRQHandler+0x3e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cfa:	b662      	cpsie	i
}
 8000cfc:	bf00      	nop
		}
	}

	__enable_irq();

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001168 	.word	0x20001168
 8000d0c:	10624dd3 	.word	0x10624dd3
 8000d10:	20001160 	.word	0x20001160
 8000d14:	20000090 	.word	0x20000090
 8000d18:	e000e010 	.word	0xe000e010
 8000d1c:	20001164 	.word	0x20001164

08000d20 <osAddThread>:
#include "ysRTOS.h"


tid_t osAddThread(void (*thread)(void)){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	/*
	 * tid_t defined in config/config.h
	 *
	 * */

	tid_t thread_id = add_thread(thread);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd21 	bl	8000770 <add_thread>
 8000d2e:	60f8      	str	r0, [r7, #12]

	return thread_id;
 8000d30:	68fb      	ldr	r3, [r7, #12]

}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <osSemaphoreGive>:

	return thread_id;

}

void osSemaphoreGive(uint32_t * semaphore){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	semaphore_give(semaphore);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fde4 	bl	8000910 <semaphore_give>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <osSemaphoreWait>:

void osSemaphoreWait(uint32_t * semaphore){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	semaphore_wait(semaphore);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fdec 	bl	8000936 <semaphore_wait>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <osLEDOn>:

void osSemaphoreInit(uint32_t * semaphore, uint32_t value){
	semaphore_init(semaphore, value);
}

void osLEDOn(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	if(__LED_INIT__ == 0){
		fprintf(stderr, "[FAILED] LED Driver Uninitialised");
		exit(__LED_DRIVER_UNINITIALISED__);
	}

	osSemaphoreWait(&LED_sem);
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <osLEDOn+0x18>)
 8000d6e:	f7ff ffef 	bl	8000d50 <osSemaphoreWait>

	LED_ON();
 8000d72:	f7ff fb55 	bl	8000420 <LED_ON>

	osSemaphoreGive(&LED_sem);
 8000d76:	4802      	ldr	r0, [pc, #8]	; (8000d80 <osLEDOn+0x18>)
 8000d78:	f7ff ffdf 	bl	8000d3a <osSemaphoreGive>

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000080 	.word	0x20000080

08000d84 <osLEDOff>:

void osLEDOff(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	if(__LED_INIT__ == 0){
		fprintf(stderr, "[FAILED] LED Driver Uninitialised");
		exit(__LED_DRIVER_UNINITIALISED__);
	}

	osSemaphoreWait(&LED_sem);
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <osLEDOff+0x18>)
 8000d8a:	f7ff ffe1 	bl	8000d50 <osSemaphoreWait>

	LED_OFF();
 8000d8e:	f7ff fb57 	bl	8000440 <LED_OFF>

	osSemaphoreGive(&LED_sem);
 8000d92:	4802      	ldr	r0, [pc, #8]	; (8000d9c <osLEDOff+0x18>)
 8000d94:	f7ff ffd1 	bl	8000d3a <osSemaphoreGive>

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000080 	.word	0x20000080

08000da0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dce:	f000 f83d 	bl	8000e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd2:	f7ff fdf3 	bl	80009bc <main>

08000dd6 <LoopForever>:

LoopForever:
  b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
	  ldr   r0, =_estack
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000de4:	08001eb8 	.word	0x08001eb8
  ldr r2, =_sbss
 8000de8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dec:	20001184 	.word	0x20001184

08000df0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <__errno>:
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <__errno+0x8>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <exit>:
 8000e00:	b508      	push	{r3, lr}
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <exit+0x20>)
 8000e04:	4604      	mov	r4, r0
 8000e06:	b113      	cbz	r3, 8000e0e <exit+0xe>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f3af 8000 	nop.w
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <exit+0x24>)
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e14:	b103      	cbz	r3, 8000e18 <exit+0x18>
 8000e16:	4798      	blx	r3
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff fdef 	bl	80009fc <_exit>
 8000e1e:	bf00      	nop
 8000e20:	00000000 	.word	0x00000000
 8000e24:	08001e18 	.word	0x08001e18

08000e28 <fiprintf>:
 8000e28:	b40e      	push	{r1, r2, r3}
 8000e2a:	b503      	push	{r0, r1, lr}
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	ab03      	add	r3, sp, #12
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <fiprintf+0x20>)
 8000e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e36:	6800      	ldr	r0, [r0, #0]
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	f000 f85f 	bl	8000efc <_vfiprintf_r>
 8000e3e:	b002      	add	sp, #8
 8000e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e44:	b003      	add	sp, #12
 8000e46:	4770      	bx	lr
 8000e48:	20000000 	.word	0x20000000

08000e4c <__libc_init_array>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4d0d      	ldr	r5, [pc, #52]	; (8000e84 <__libc_init_array+0x38>)
 8000e50:	4c0d      	ldr	r4, [pc, #52]	; (8000e88 <__libc_init_array+0x3c>)
 8000e52:	1b64      	subs	r4, r4, r5
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	2600      	movs	r6, #0
 8000e58:	42a6      	cmp	r6, r4
 8000e5a:	d109      	bne.n	8000e70 <__libc_init_array+0x24>
 8000e5c:	4d0b      	ldr	r5, [pc, #44]	; (8000e8c <__libc_init_array+0x40>)
 8000e5e:	4c0c      	ldr	r4, [pc, #48]	; (8000e90 <__libc_init_array+0x44>)
 8000e60:	f000 ff94 	bl	8001d8c <_init>
 8000e64:	1b64      	subs	r4, r4, r5
 8000e66:	10a4      	asrs	r4, r4, #2
 8000e68:	2600      	movs	r6, #0
 8000e6a:	42a6      	cmp	r6, r4
 8000e6c:	d105      	bne.n	8000e7a <__libc_init_array+0x2e>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e74:	4798      	blx	r3
 8000e76:	3601      	adds	r6, #1
 8000e78:	e7ee      	b.n	8000e58 <__libc_init_array+0xc>
 8000e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7e:	4798      	blx	r3
 8000e80:	3601      	adds	r6, #1
 8000e82:	e7f2      	b.n	8000e6a <__libc_init_array+0x1e>
 8000e84:	08001eb0 	.word	0x08001eb0
 8000e88:	08001eb0 	.word	0x08001eb0
 8000e8c:	08001eb0 	.word	0x08001eb0
 8000e90:	08001eb4 	.word	0x08001eb4

08000e94 <__retarget_lock_init_recursive>:
 8000e94:	4770      	bx	lr

08000e96 <__retarget_lock_acquire_recursive>:
 8000e96:	4770      	bx	lr

08000e98 <__retarget_lock_release_recursive>:
 8000e98:	4770      	bx	lr

08000e9a <memset>:
 8000e9a:	4402      	add	r2, r0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d100      	bne.n	8000ea4 <memset+0xa>
 8000ea2:	4770      	bx	lr
 8000ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8000ea8:	e7f9      	b.n	8000e9e <memset+0x4>

08000eaa <__sfputc_r>:
 8000eaa:	6893      	ldr	r3, [r2, #8]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	b410      	push	{r4}
 8000eb2:	6093      	str	r3, [r2, #8]
 8000eb4:	da08      	bge.n	8000ec8 <__sfputc_r+0x1e>
 8000eb6:	6994      	ldr	r4, [r2, #24]
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	db01      	blt.n	8000ec0 <__sfputc_r+0x16>
 8000ebc:	290a      	cmp	r1, #10
 8000ebe:	d103      	bne.n	8000ec8 <__sfputc_r+0x1e>
 8000ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ec4:	f000 bade 	b.w	8001484 <__swbuf_r>
 8000ec8:	6813      	ldr	r3, [r2, #0]
 8000eca:	1c58      	adds	r0, r3, #1
 8000ecc:	6010      	str	r0, [r2, #0]
 8000ece:	7019      	strb	r1, [r3, #0]
 8000ed0:	4608      	mov	r0, r1
 8000ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <__sfputs_r>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	4606      	mov	r6, r0
 8000edc:	460f      	mov	r7, r1
 8000ede:	4614      	mov	r4, r2
 8000ee0:	18d5      	adds	r5, r2, r3
 8000ee2:	42ac      	cmp	r4, r5
 8000ee4:	d101      	bne.n	8000eea <__sfputs_r+0x12>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e007      	b.n	8000efa <__sfputs_r+0x22>
 8000eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eee:	463a      	mov	r2, r7
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	f7ff ffda 	bl	8000eaa <__sfputc_r>
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	d1f3      	bne.n	8000ee2 <__sfputs_r+0xa>
 8000efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000efc <_vfiprintf_r>:
 8000efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f00:	460d      	mov	r5, r1
 8000f02:	b09d      	sub	sp, #116	; 0x74
 8000f04:	4614      	mov	r4, r2
 8000f06:	4698      	mov	r8, r3
 8000f08:	4606      	mov	r6, r0
 8000f0a:	b118      	cbz	r0, 8000f14 <_vfiprintf_r+0x18>
 8000f0c:	6983      	ldr	r3, [r0, #24]
 8000f0e:	b90b      	cbnz	r3, 8000f14 <_vfiprintf_r+0x18>
 8000f10:	f000 fc92 	bl	8001838 <__sinit>
 8000f14:	4b89      	ldr	r3, [pc, #548]	; (800113c <_vfiprintf_r+0x240>)
 8000f16:	429d      	cmp	r5, r3
 8000f18:	d11b      	bne.n	8000f52 <_vfiprintf_r+0x56>
 8000f1a:	6875      	ldr	r5, [r6, #4]
 8000f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f1e:	07d9      	lsls	r1, r3, #31
 8000f20:	d405      	bmi.n	8000f2e <_vfiprintf_r+0x32>
 8000f22:	89ab      	ldrh	r3, [r5, #12]
 8000f24:	059a      	lsls	r2, r3, #22
 8000f26:	d402      	bmi.n	8000f2e <_vfiprintf_r+0x32>
 8000f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f2a:	f7ff ffb4 	bl	8000e96 <__retarget_lock_acquire_recursive>
 8000f2e:	89ab      	ldrh	r3, [r5, #12]
 8000f30:	071b      	lsls	r3, r3, #28
 8000f32:	d501      	bpl.n	8000f38 <_vfiprintf_r+0x3c>
 8000f34:	692b      	ldr	r3, [r5, #16]
 8000f36:	b9eb      	cbnz	r3, 8000f74 <_vfiprintf_r+0x78>
 8000f38:	4629      	mov	r1, r5
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f000 faf4 	bl	8001528 <__swsetup_r>
 8000f40:	b1c0      	cbz	r0, 8000f74 <_vfiprintf_r+0x78>
 8000f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f44:	07dc      	lsls	r4, r3, #31
 8000f46:	d50e      	bpl.n	8000f66 <_vfiprintf_r+0x6a>
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	b01d      	add	sp, #116	; 0x74
 8000f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f52:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <_vfiprintf_r+0x244>)
 8000f54:	429d      	cmp	r5, r3
 8000f56:	d101      	bne.n	8000f5c <_vfiprintf_r+0x60>
 8000f58:	68b5      	ldr	r5, [r6, #8]
 8000f5a:	e7df      	b.n	8000f1c <_vfiprintf_r+0x20>
 8000f5c:	4b79      	ldr	r3, [pc, #484]	; (8001144 <_vfiprintf_r+0x248>)
 8000f5e:	429d      	cmp	r5, r3
 8000f60:	bf08      	it	eq
 8000f62:	68f5      	ldreq	r5, [r6, #12]
 8000f64:	e7da      	b.n	8000f1c <_vfiprintf_r+0x20>
 8000f66:	89ab      	ldrh	r3, [r5, #12]
 8000f68:	0598      	lsls	r0, r3, #22
 8000f6a:	d4ed      	bmi.n	8000f48 <_vfiprintf_r+0x4c>
 8000f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f6e:	f7ff ff93 	bl	8000e98 <__retarget_lock_release_recursive>
 8000f72:	e7e9      	b.n	8000f48 <_vfiprintf_r+0x4c>
 8000f74:	2300      	movs	r3, #0
 8000f76:	9309      	str	r3, [sp, #36]	; 0x24
 8000f78:	2320      	movs	r3, #32
 8000f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f82:	2330      	movs	r3, #48	; 0x30
 8000f84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001148 <_vfiprintf_r+0x24c>
 8000f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f8c:	f04f 0901 	mov.w	r9, #1
 8000f90:	4623      	mov	r3, r4
 8000f92:	469a      	mov	sl, r3
 8000f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f98:	b10a      	cbz	r2, 8000f9e <_vfiprintf_r+0xa2>
 8000f9a:	2a25      	cmp	r2, #37	; 0x25
 8000f9c:	d1f9      	bne.n	8000f92 <_vfiprintf_r+0x96>
 8000f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8000fa2:	d00b      	beq.n	8000fbc <_vfiprintf_r+0xc0>
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4622      	mov	r2, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4630      	mov	r0, r6
 8000fac:	f7ff ff94 	bl	8000ed8 <__sfputs_r>
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	f000 80aa 	beq.w	800110a <_vfiprintf_r+0x20e>
 8000fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fb8:	445a      	add	r2, fp
 8000fba:	9209      	str	r2, [sp, #36]	; 0x24
 8000fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a2 	beq.w	800110a <_vfiprintf_r+0x20e>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fd0:	f10a 0a01 	add.w	sl, sl, #1
 8000fd4:	9304      	str	r3, [sp, #16]
 8000fd6:	9307      	str	r3, [sp, #28]
 8000fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8000fde:	4654      	mov	r4, sl
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fe6:	4858      	ldr	r0, [pc, #352]	; (8001148 <_vfiprintf_r+0x24c>)
 8000fe8:	f7ff f8fa 	bl	80001e0 <memchr>
 8000fec:	9a04      	ldr	r2, [sp, #16]
 8000fee:	b9d8      	cbnz	r0, 8001028 <_vfiprintf_r+0x12c>
 8000ff0:	06d1      	lsls	r1, r2, #27
 8000ff2:	bf44      	itt	mi
 8000ff4:	2320      	movmi	r3, #32
 8000ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ffa:	0713      	lsls	r3, r2, #28
 8000ffc:	bf44      	itt	mi
 8000ffe:	232b      	movmi	r3, #43	; 0x2b
 8001000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001004:	f89a 3000 	ldrb.w	r3, [sl]
 8001008:	2b2a      	cmp	r3, #42	; 0x2a
 800100a:	d015      	beq.n	8001038 <_vfiprintf_r+0x13c>
 800100c:	9a07      	ldr	r2, [sp, #28]
 800100e:	4654      	mov	r4, sl
 8001010:	2000      	movs	r0, #0
 8001012:	f04f 0c0a 	mov.w	ip, #10
 8001016:	4621      	mov	r1, r4
 8001018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800101c:	3b30      	subs	r3, #48	; 0x30
 800101e:	2b09      	cmp	r3, #9
 8001020:	d94e      	bls.n	80010c0 <_vfiprintf_r+0x1c4>
 8001022:	b1b0      	cbz	r0, 8001052 <_vfiprintf_r+0x156>
 8001024:	9207      	str	r2, [sp, #28]
 8001026:	e014      	b.n	8001052 <_vfiprintf_r+0x156>
 8001028:	eba0 0308 	sub.w	r3, r0, r8
 800102c:	fa09 f303 	lsl.w	r3, r9, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	9304      	str	r3, [sp, #16]
 8001034:	46a2      	mov	sl, r4
 8001036:	e7d2      	b.n	8000fde <_vfiprintf_r+0xe2>
 8001038:	9b03      	ldr	r3, [sp, #12]
 800103a:	1d19      	adds	r1, r3, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	9103      	str	r1, [sp, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	bfbb      	ittet	lt
 8001044:	425b      	neglt	r3, r3
 8001046:	f042 0202 	orrlt.w	r2, r2, #2
 800104a:	9307      	strge	r3, [sp, #28]
 800104c:	9307      	strlt	r3, [sp, #28]
 800104e:	bfb8      	it	lt
 8001050:	9204      	strlt	r2, [sp, #16]
 8001052:	7823      	ldrb	r3, [r4, #0]
 8001054:	2b2e      	cmp	r3, #46	; 0x2e
 8001056:	d10c      	bne.n	8001072 <_vfiprintf_r+0x176>
 8001058:	7863      	ldrb	r3, [r4, #1]
 800105a:	2b2a      	cmp	r3, #42	; 0x2a
 800105c:	d135      	bne.n	80010ca <_vfiprintf_r+0x1ce>
 800105e:	9b03      	ldr	r3, [sp, #12]
 8001060:	1d1a      	adds	r2, r3, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	9203      	str	r2, [sp, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	bfb8      	it	lt
 800106a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800106e:	3402      	adds	r4, #2
 8001070:	9305      	str	r3, [sp, #20]
 8001072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001158 <_vfiprintf_r+0x25c>
 8001076:	7821      	ldrb	r1, [r4, #0]
 8001078:	2203      	movs	r2, #3
 800107a:	4650      	mov	r0, sl
 800107c:	f7ff f8b0 	bl	80001e0 <memchr>
 8001080:	b140      	cbz	r0, 8001094 <_vfiprintf_r+0x198>
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	eba0 000a 	sub.w	r0, r0, sl
 8001088:	fa03 f000 	lsl.w	r0, r3, r0
 800108c:	9b04      	ldr	r3, [sp, #16]
 800108e:	4303      	orrs	r3, r0
 8001090:	3401      	adds	r4, #1
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001098:	482c      	ldr	r0, [pc, #176]	; (800114c <_vfiprintf_r+0x250>)
 800109a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800109e:	2206      	movs	r2, #6
 80010a0:	f7ff f89e 	bl	80001e0 <memchr>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d03f      	beq.n	8001128 <_vfiprintf_r+0x22c>
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <_vfiprintf_r+0x254>)
 80010aa:	bb1b      	cbnz	r3, 80010f4 <_vfiprintf_r+0x1f8>
 80010ac:	9b03      	ldr	r3, [sp, #12]
 80010ae:	3307      	adds	r3, #7
 80010b0:	f023 0307 	bic.w	r3, r3, #7
 80010b4:	3308      	adds	r3, #8
 80010b6:	9303      	str	r3, [sp, #12]
 80010b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010ba:	443b      	add	r3, r7
 80010bc:	9309      	str	r3, [sp, #36]	; 0x24
 80010be:	e767      	b.n	8000f90 <_vfiprintf_r+0x94>
 80010c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80010c4:	460c      	mov	r4, r1
 80010c6:	2001      	movs	r0, #1
 80010c8:	e7a5      	b.n	8001016 <_vfiprintf_r+0x11a>
 80010ca:	2300      	movs	r3, #0
 80010cc:	3401      	adds	r4, #1
 80010ce:	9305      	str	r3, [sp, #20]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0c0a 	mov.w	ip, #10
 80010d6:	4620      	mov	r0, r4
 80010d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010dc:	3a30      	subs	r2, #48	; 0x30
 80010de:	2a09      	cmp	r2, #9
 80010e0:	d903      	bls.n	80010ea <_vfiprintf_r+0x1ee>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0c5      	beq.n	8001072 <_vfiprintf_r+0x176>
 80010e6:	9105      	str	r1, [sp, #20]
 80010e8:	e7c3      	b.n	8001072 <_vfiprintf_r+0x176>
 80010ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80010ee:	4604      	mov	r4, r0
 80010f0:	2301      	movs	r3, #1
 80010f2:	e7f0      	b.n	80010d6 <_vfiprintf_r+0x1da>
 80010f4:	ab03      	add	r3, sp, #12
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	462a      	mov	r2, r5
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <_vfiprintf_r+0x258>)
 80010fc:	a904      	add	r1, sp, #16
 80010fe:	4630      	mov	r0, r6
 8001100:	f3af 8000 	nop.w
 8001104:	4607      	mov	r7, r0
 8001106:	1c78      	adds	r0, r7, #1
 8001108:	d1d6      	bne.n	80010b8 <_vfiprintf_r+0x1bc>
 800110a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800110c:	07d9      	lsls	r1, r3, #31
 800110e:	d405      	bmi.n	800111c <_vfiprintf_r+0x220>
 8001110:	89ab      	ldrh	r3, [r5, #12]
 8001112:	059a      	lsls	r2, r3, #22
 8001114:	d402      	bmi.n	800111c <_vfiprintf_r+0x220>
 8001116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001118:	f7ff febe 	bl	8000e98 <__retarget_lock_release_recursive>
 800111c:	89ab      	ldrh	r3, [r5, #12]
 800111e:	065b      	lsls	r3, r3, #25
 8001120:	f53f af12 	bmi.w	8000f48 <_vfiprintf_r+0x4c>
 8001124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001126:	e711      	b.n	8000f4c <_vfiprintf_r+0x50>
 8001128:	ab03      	add	r3, sp, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	462a      	mov	r2, r5
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <_vfiprintf_r+0x258>)
 8001130:	a904      	add	r1, sp, #16
 8001132:	4630      	mov	r0, r6
 8001134:	f000 f880 	bl	8001238 <_printf_i>
 8001138:	e7e4      	b.n	8001104 <_vfiprintf_r+0x208>
 800113a:	bf00      	nop
 800113c:	08001e70 	.word	0x08001e70
 8001140:	08001e90 	.word	0x08001e90
 8001144:	08001e50 	.word	0x08001e50
 8001148:	08001e1c 	.word	0x08001e1c
 800114c:	08001e26 	.word	0x08001e26
 8001150:	00000000 	.word	0x00000000
 8001154:	08000ed9 	.word	0x08000ed9
 8001158:	08001e22 	.word	0x08001e22

0800115c <_printf_common>:
 800115c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001160:	4616      	mov	r6, r2
 8001162:	4699      	mov	r9, r3
 8001164:	688a      	ldr	r2, [r1, #8]
 8001166:	690b      	ldr	r3, [r1, #16]
 8001168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800116c:	4293      	cmp	r3, r2
 800116e:	bfb8      	it	lt
 8001170:	4613      	movlt	r3, r2
 8001172:	6033      	str	r3, [r6, #0]
 8001174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001178:	4607      	mov	r7, r0
 800117a:	460c      	mov	r4, r1
 800117c:	b10a      	cbz	r2, 8001182 <_printf_common+0x26>
 800117e:	3301      	adds	r3, #1
 8001180:	6033      	str	r3, [r6, #0]
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	0699      	lsls	r1, r3, #26
 8001186:	bf42      	ittt	mi
 8001188:	6833      	ldrmi	r3, [r6, #0]
 800118a:	3302      	addmi	r3, #2
 800118c:	6033      	strmi	r3, [r6, #0]
 800118e:	6825      	ldr	r5, [r4, #0]
 8001190:	f015 0506 	ands.w	r5, r5, #6
 8001194:	d106      	bne.n	80011a4 <_printf_common+0x48>
 8001196:	f104 0a19 	add.w	sl, r4, #25
 800119a:	68e3      	ldr	r3, [r4, #12]
 800119c:	6832      	ldr	r2, [r6, #0]
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	42ab      	cmp	r3, r5
 80011a2:	dc26      	bgt.n	80011f2 <_printf_common+0x96>
 80011a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011a8:	1e13      	subs	r3, r2, #0
 80011aa:	6822      	ldr	r2, [r4, #0]
 80011ac:	bf18      	it	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	0692      	lsls	r2, r2, #26
 80011b2:	d42b      	bmi.n	800120c <_printf_common+0xb0>
 80011b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011b8:	4649      	mov	r1, r9
 80011ba:	4638      	mov	r0, r7
 80011bc:	47c0      	blx	r8
 80011be:	3001      	adds	r0, #1
 80011c0:	d01e      	beq.n	8001200 <_printf_common+0xa4>
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	68e5      	ldr	r5, [r4, #12]
 80011c6:	6832      	ldr	r2, [r6, #0]
 80011c8:	f003 0306 	and.w	r3, r3, #6
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	bf08      	it	eq
 80011d0:	1aad      	subeq	r5, r5, r2
 80011d2:	68a3      	ldr	r3, [r4, #8]
 80011d4:	6922      	ldr	r2, [r4, #16]
 80011d6:	bf0c      	ite	eq
 80011d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011dc:	2500      	movne	r5, #0
 80011de:	4293      	cmp	r3, r2
 80011e0:	bfc4      	itt	gt
 80011e2:	1a9b      	subgt	r3, r3, r2
 80011e4:	18ed      	addgt	r5, r5, r3
 80011e6:	2600      	movs	r6, #0
 80011e8:	341a      	adds	r4, #26
 80011ea:	42b5      	cmp	r5, r6
 80011ec:	d11a      	bne.n	8001224 <_printf_common+0xc8>
 80011ee:	2000      	movs	r0, #0
 80011f0:	e008      	b.n	8001204 <_printf_common+0xa8>
 80011f2:	2301      	movs	r3, #1
 80011f4:	4652      	mov	r2, sl
 80011f6:	4649      	mov	r1, r9
 80011f8:	4638      	mov	r0, r7
 80011fa:	47c0      	blx	r8
 80011fc:	3001      	adds	r0, #1
 80011fe:	d103      	bne.n	8001208 <_printf_common+0xac>
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001208:	3501      	adds	r5, #1
 800120a:	e7c6      	b.n	800119a <_printf_common+0x3e>
 800120c:	18e1      	adds	r1, r4, r3
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	2030      	movs	r0, #48	; 0x30
 8001212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001216:	4422      	add	r2, r4
 8001218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800121c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001220:	3302      	adds	r3, #2
 8001222:	e7c7      	b.n	80011b4 <_printf_common+0x58>
 8001224:	2301      	movs	r3, #1
 8001226:	4622      	mov	r2, r4
 8001228:	4649      	mov	r1, r9
 800122a:	4638      	mov	r0, r7
 800122c:	47c0      	blx	r8
 800122e:	3001      	adds	r0, #1
 8001230:	d0e6      	beq.n	8001200 <_printf_common+0xa4>
 8001232:	3601      	adds	r6, #1
 8001234:	e7d9      	b.n	80011ea <_printf_common+0x8e>
	...

08001238 <_printf_i>:
 8001238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800123c:	7e0f      	ldrb	r7, [r1, #24]
 800123e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001240:	2f78      	cmp	r7, #120	; 0x78
 8001242:	4691      	mov	r9, r2
 8001244:	4680      	mov	r8, r0
 8001246:	460c      	mov	r4, r1
 8001248:	469a      	mov	sl, r3
 800124a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800124e:	d807      	bhi.n	8001260 <_printf_i+0x28>
 8001250:	2f62      	cmp	r7, #98	; 0x62
 8001252:	d80a      	bhi.n	800126a <_printf_i+0x32>
 8001254:	2f00      	cmp	r7, #0
 8001256:	f000 80d8 	beq.w	800140a <_printf_i+0x1d2>
 800125a:	2f58      	cmp	r7, #88	; 0x58
 800125c:	f000 80a3 	beq.w	80013a6 <_printf_i+0x16e>
 8001260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001268:	e03a      	b.n	80012e0 <_printf_i+0xa8>
 800126a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800126e:	2b15      	cmp	r3, #21
 8001270:	d8f6      	bhi.n	8001260 <_printf_i+0x28>
 8001272:	a101      	add	r1, pc, #4	; (adr r1, 8001278 <_printf_i+0x40>)
 8001274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001278:	080012d1 	.word	0x080012d1
 800127c:	080012e5 	.word	0x080012e5
 8001280:	08001261 	.word	0x08001261
 8001284:	08001261 	.word	0x08001261
 8001288:	08001261 	.word	0x08001261
 800128c:	08001261 	.word	0x08001261
 8001290:	080012e5 	.word	0x080012e5
 8001294:	08001261 	.word	0x08001261
 8001298:	08001261 	.word	0x08001261
 800129c:	08001261 	.word	0x08001261
 80012a0:	08001261 	.word	0x08001261
 80012a4:	080013f1 	.word	0x080013f1
 80012a8:	08001315 	.word	0x08001315
 80012ac:	080013d3 	.word	0x080013d3
 80012b0:	08001261 	.word	0x08001261
 80012b4:	08001261 	.word	0x08001261
 80012b8:	08001413 	.word	0x08001413
 80012bc:	08001261 	.word	0x08001261
 80012c0:	08001315 	.word	0x08001315
 80012c4:	08001261 	.word	0x08001261
 80012c8:	08001261 	.word	0x08001261
 80012cc:	080013db 	.word	0x080013db
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	1d1a      	adds	r2, r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	602a      	str	r2, [r5, #0]
 80012d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0a3      	b.n	800142c <_printf_i+0x1f4>
 80012e4:	6820      	ldr	r0, [r4, #0]
 80012e6:	6829      	ldr	r1, [r5, #0]
 80012e8:	0606      	lsls	r6, r0, #24
 80012ea:	f101 0304 	add.w	r3, r1, #4
 80012ee:	d50a      	bpl.n	8001306 <_printf_i+0xce>
 80012f0:	680e      	ldr	r6, [r1, #0]
 80012f2:	602b      	str	r3, [r5, #0]
 80012f4:	2e00      	cmp	r6, #0
 80012f6:	da03      	bge.n	8001300 <_printf_i+0xc8>
 80012f8:	232d      	movs	r3, #45	; 0x2d
 80012fa:	4276      	negs	r6, r6
 80012fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001300:	485e      	ldr	r0, [pc, #376]	; (800147c <_printf_i+0x244>)
 8001302:	230a      	movs	r3, #10
 8001304:	e019      	b.n	800133a <_printf_i+0x102>
 8001306:	680e      	ldr	r6, [r1, #0]
 8001308:	602b      	str	r3, [r5, #0]
 800130a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800130e:	bf18      	it	ne
 8001310:	b236      	sxthne	r6, r6
 8001312:	e7ef      	b.n	80012f4 <_printf_i+0xbc>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	6820      	ldr	r0, [r4, #0]
 8001318:	1d19      	adds	r1, r3, #4
 800131a:	6029      	str	r1, [r5, #0]
 800131c:	0601      	lsls	r1, r0, #24
 800131e:	d501      	bpl.n	8001324 <_printf_i+0xec>
 8001320:	681e      	ldr	r6, [r3, #0]
 8001322:	e002      	b.n	800132a <_printf_i+0xf2>
 8001324:	0646      	lsls	r6, r0, #25
 8001326:	d5fb      	bpl.n	8001320 <_printf_i+0xe8>
 8001328:	881e      	ldrh	r6, [r3, #0]
 800132a:	4854      	ldr	r0, [pc, #336]	; (800147c <_printf_i+0x244>)
 800132c:	2f6f      	cmp	r7, #111	; 0x6f
 800132e:	bf0c      	ite	eq
 8001330:	2308      	moveq	r3, #8
 8001332:	230a      	movne	r3, #10
 8001334:	2100      	movs	r1, #0
 8001336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800133a:	6865      	ldr	r5, [r4, #4]
 800133c:	60a5      	str	r5, [r4, #8]
 800133e:	2d00      	cmp	r5, #0
 8001340:	bfa2      	ittt	ge
 8001342:	6821      	ldrge	r1, [r4, #0]
 8001344:	f021 0104 	bicge.w	r1, r1, #4
 8001348:	6021      	strge	r1, [r4, #0]
 800134a:	b90e      	cbnz	r6, 8001350 <_printf_i+0x118>
 800134c:	2d00      	cmp	r5, #0
 800134e:	d04d      	beq.n	80013ec <_printf_i+0x1b4>
 8001350:	4615      	mov	r5, r2
 8001352:	fbb6 f1f3 	udiv	r1, r6, r3
 8001356:	fb03 6711 	mls	r7, r3, r1, r6
 800135a:	5dc7      	ldrb	r7, [r0, r7]
 800135c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001360:	4637      	mov	r7, r6
 8001362:	42bb      	cmp	r3, r7
 8001364:	460e      	mov	r6, r1
 8001366:	d9f4      	bls.n	8001352 <_printf_i+0x11a>
 8001368:	2b08      	cmp	r3, #8
 800136a:	d10b      	bne.n	8001384 <_printf_i+0x14c>
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	07de      	lsls	r6, r3, #31
 8001370:	d508      	bpl.n	8001384 <_printf_i+0x14c>
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	6861      	ldr	r1, [r4, #4]
 8001376:	4299      	cmp	r1, r3
 8001378:	bfde      	ittt	le
 800137a:	2330      	movle	r3, #48	; 0x30
 800137c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001384:	1b52      	subs	r2, r2, r5
 8001386:	6122      	str	r2, [r4, #16]
 8001388:	f8cd a000 	str.w	sl, [sp]
 800138c:	464b      	mov	r3, r9
 800138e:	aa03      	add	r2, sp, #12
 8001390:	4621      	mov	r1, r4
 8001392:	4640      	mov	r0, r8
 8001394:	f7ff fee2 	bl	800115c <_printf_common>
 8001398:	3001      	adds	r0, #1
 800139a:	d14c      	bne.n	8001436 <_printf_i+0x1fe>
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	b004      	add	sp, #16
 80013a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a6:	4835      	ldr	r0, [pc, #212]	; (800147c <_printf_i+0x244>)
 80013a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80013ac:	6829      	ldr	r1, [r5, #0]
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80013b4:	6029      	str	r1, [r5, #0]
 80013b6:	061d      	lsls	r5, r3, #24
 80013b8:	d514      	bpl.n	80013e4 <_printf_i+0x1ac>
 80013ba:	07df      	lsls	r7, r3, #31
 80013bc:	bf44      	itt	mi
 80013be:	f043 0320 	orrmi.w	r3, r3, #32
 80013c2:	6023      	strmi	r3, [r4, #0]
 80013c4:	b91e      	cbnz	r6, 80013ce <_printf_i+0x196>
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f023 0320 	bic.w	r3, r3, #32
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	2310      	movs	r3, #16
 80013d0:	e7b0      	b.n	8001334 <_printf_i+0xfc>
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	6023      	str	r3, [r4, #0]
 80013da:	2378      	movs	r3, #120	; 0x78
 80013dc:	4828      	ldr	r0, [pc, #160]	; (8001480 <_printf_i+0x248>)
 80013de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80013e2:	e7e3      	b.n	80013ac <_printf_i+0x174>
 80013e4:	0659      	lsls	r1, r3, #25
 80013e6:	bf48      	it	mi
 80013e8:	b2b6      	uxthmi	r6, r6
 80013ea:	e7e6      	b.n	80013ba <_printf_i+0x182>
 80013ec:	4615      	mov	r5, r2
 80013ee:	e7bb      	b.n	8001368 <_printf_i+0x130>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	6826      	ldr	r6, [r4, #0]
 80013f4:	6961      	ldr	r1, [r4, #20]
 80013f6:	1d18      	adds	r0, r3, #4
 80013f8:	6028      	str	r0, [r5, #0]
 80013fa:	0635      	lsls	r5, r6, #24
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	d501      	bpl.n	8001404 <_printf_i+0x1cc>
 8001400:	6019      	str	r1, [r3, #0]
 8001402:	e002      	b.n	800140a <_printf_i+0x1d2>
 8001404:	0670      	lsls	r0, r6, #25
 8001406:	d5fb      	bpl.n	8001400 <_printf_i+0x1c8>
 8001408:	8019      	strh	r1, [r3, #0]
 800140a:	2300      	movs	r3, #0
 800140c:	6123      	str	r3, [r4, #16]
 800140e:	4615      	mov	r5, r2
 8001410:	e7ba      	b.n	8001388 <_printf_i+0x150>
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	1d1a      	adds	r2, r3, #4
 8001416:	602a      	str	r2, [r5, #0]
 8001418:	681d      	ldr	r5, [r3, #0]
 800141a:	6862      	ldr	r2, [r4, #4]
 800141c:	2100      	movs	r1, #0
 800141e:	4628      	mov	r0, r5
 8001420:	f7fe fede 	bl	80001e0 <memchr>
 8001424:	b108      	cbz	r0, 800142a <_printf_i+0x1f2>
 8001426:	1b40      	subs	r0, r0, r5
 8001428:	6060      	str	r0, [r4, #4]
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	6123      	str	r3, [r4, #16]
 800142e:	2300      	movs	r3, #0
 8001430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001434:	e7a8      	b.n	8001388 <_printf_i+0x150>
 8001436:	6923      	ldr	r3, [r4, #16]
 8001438:	462a      	mov	r2, r5
 800143a:	4649      	mov	r1, r9
 800143c:	4640      	mov	r0, r8
 800143e:	47d0      	blx	sl
 8001440:	3001      	adds	r0, #1
 8001442:	d0ab      	beq.n	800139c <_printf_i+0x164>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	079b      	lsls	r3, r3, #30
 8001448:	d413      	bmi.n	8001472 <_printf_i+0x23a>
 800144a:	68e0      	ldr	r0, [r4, #12]
 800144c:	9b03      	ldr	r3, [sp, #12]
 800144e:	4298      	cmp	r0, r3
 8001450:	bfb8      	it	lt
 8001452:	4618      	movlt	r0, r3
 8001454:	e7a4      	b.n	80013a0 <_printf_i+0x168>
 8001456:	2301      	movs	r3, #1
 8001458:	4632      	mov	r2, r6
 800145a:	4649      	mov	r1, r9
 800145c:	4640      	mov	r0, r8
 800145e:	47d0      	blx	sl
 8001460:	3001      	adds	r0, #1
 8001462:	d09b      	beq.n	800139c <_printf_i+0x164>
 8001464:	3501      	adds	r5, #1
 8001466:	68e3      	ldr	r3, [r4, #12]
 8001468:	9903      	ldr	r1, [sp, #12]
 800146a:	1a5b      	subs	r3, r3, r1
 800146c:	42ab      	cmp	r3, r5
 800146e:	dcf2      	bgt.n	8001456 <_printf_i+0x21e>
 8001470:	e7eb      	b.n	800144a <_printf_i+0x212>
 8001472:	2500      	movs	r5, #0
 8001474:	f104 0619 	add.w	r6, r4, #25
 8001478:	e7f5      	b.n	8001466 <_printf_i+0x22e>
 800147a:	bf00      	nop
 800147c:	08001e2d 	.word	0x08001e2d
 8001480:	08001e3e 	.word	0x08001e3e

08001484 <__swbuf_r>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	460e      	mov	r6, r1
 8001488:	4614      	mov	r4, r2
 800148a:	4605      	mov	r5, r0
 800148c:	b118      	cbz	r0, 8001496 <__swbuf_r+0x12>
 800148e:	6983      	ldr	r3, [r0, #24]
 8001490:	b90b      	cbnz	r3, 8001496 <__swbuf_r+0x12>
 8001492:	f000 f9d1 	bl	8001838 <__sinit>
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <__swbuf_r+0x98>)
 8001498:	429c      	cmp	r4, r3
 800149a:	d12b      	bne.n	80014f4 <__swbuf_r+0x70>
 800149c:	686c      	ldr	r4, [r5, #4]
 800149e:	69a3      	ldr	r3, [r4, #24]
 80014a0:	60a3      	str	r3, [r4, #8]
 80014a2:	89a3      	ldrh	r3, [r4, #12]
 80014a4:	071a      	lsls	r2, r3, #28
 80014a6:	d52f      	bpl.n	8001508 <__swbuf_r+0x84>
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	b36b      	cbz	r3, 8001508 <__swbuf_r+0x84>
 80014ac:	6923      	ldr	r3, [r4, #16]
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	1ac0      	subs	r0, r0, r3
 80014b2:	6963      	ldr	r3, [r4, #20]
 80014b4:	b2f6      	uxtb	r6, r6
 80014b6:	4283      	cmp	r3, r0
 80014b8:	4637      	mov	r7, r6
 80014ba:	dc04      	bgt.n	80014c6 <__swbuf_r+0x42>
 80014bc:	4621      	mov	r1, r4
 80014be:	4628      	mov	r0, r5
 80014c0:	f000 f926 	bl	8001710 <_fflush_r>
 80014c4:	bb30      	cbnz	r0, 8001514 <__swbuf_r+0x90>
 80014c6:	68a3      	ldr	r3, [r4, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60a3      	str	r3, [r4, #8]
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	6022      	str	r2, [r4, #0]
 80014d2:	701e      	strb	r6, [r3, #0]
 80014d4:	6963      	ldr	r3, [r4, #20]
 80014d6:	3001      	adds	r0, #1
 80014d8:	4283      	cmp	r3, r0
 80014da:	d004      	beq.n	80014e6 <__swbuf_r+0x62>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	07db      	lsls	r3, r3, #31
 80014e0:	d506      	bpl.n	80014f0 <__swbuf_r+0x6c>
 80014e2:	2e0a      	cmp	r6, #10
 80014e4:	d104      	bne.n	80014f0 <__swbuf_r+0x6c>
 80014e6:	4621      	mov	r1, r4
 80014e8:	4628      	mov	r0, r5
 80014ea:	f000 f911 	bl	8001710 <_fflush_r>
 80014ee:	b988      	cbnz	r0, 8001514 <__swbuf_r+0x90>
 80014f0:	4638      	mov	r0, r7
 80014f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <__swbuf_r+0x9c>)
 80014f6:	429c      	cmp	r4, r3
 80014f8:	d101      	bne.n	80014fe <__swbuf_r+0x7a>
 80014fa:	68ac      	ldr	r4, [r5, #8]
 80014fc:	e7cf      	b.n	800149e <__swbuf_r+0x1a>
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <__swbuf_r+0xa0>)
 8001500:	429c      	cmp	r4, r3
 8001502:	bf08      	it	eq
 8001504:	68ec      	ldreq	r4, [r5, #12]
 8001506:	e7ca      	b.n	800149e <__swbuf_r+0x1a>
 8001508:	4621      	mov	r1, r4
 800150a:	4628      	mov	r0, r5
 800150c:	f000 f80c 	bl	8001528 <__swsetup_r>
 8001510:	2800      	cmp	r0, #0
 8001512:	d0cb      	beq.n	80014ac <__swbuf_r+0x28>
 8001514:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001518:	e7ea      	b.n	80014f0 <__swbuf_r+0x6c>
 800151a:	bf00      	nop
 800151c:	08001e70 	.word	0x08001e70
 8001520:	08001e90 	.word	0x08001e90
 8001524:	08001e50 	.word	0x08001e50

08001528 <__swsetup_r>:
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <__swsetup_r+0xcc>)
 800152a:	b570      	push	{r4, r5, r6, lr}
 800152c:	681d      	ldr	r5, [r3, #0]
 800152e:	4606      	mov	r6, r0
 8001530:	460c      	mov	r4, r1
 8001532:	b125      	cbz	r5, 800153e <__swsetup_r+0x16>
 8001534:	69ab      	ldr	r3, [r5, #24]
 8001536:	b913      	cbnz	r3, 800153e <__swsetup_r+0x16>
 8001538:	4628      	mov	r0, r5
 800153a:	f000 f97d 	bl	8001838 <__sinit>
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <__swsetup_r+0xd0>)
 8001540:	429c      	cmp	r4, r3
 8001542:	d10f      	bne.n	8001564 <__swsetup_r+0x3c>
 8001544:	686c      	ldr	r4, [r5, #4]
 8001546:	89a3      	ldrh	r3, [r4, #12]
 8001548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800154c:	0719      	lsls	r1, r3, #28
 800154e:	d42c      	bmi.n	80015aa <__swsetup_r+0x82>
 8001550:	06dd      	lsls	r5, r3, #27
 8001552:	d411      	bmi.n	8001578 <__swsetup_r+0x50>
 8001554:	2309      	movs	r3, #9
 8001556:	6033      	str	r3, [r6, #0]
 8001558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800155c:	81a3      	strh	r3, [r4, #12]
 800155e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001562:	e03e      	b.n	80015e2 <__swsetup_r+0xba>
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <__swsetup_r+0xd4>)
 8001566:	429c      	cmp	r4, r3
 8001568:	d101      	bne.n	800156e <__swsetup_r+0x46>
 800156a:	68ac      	ldr	r4, [r5, #8]
 800156c:	e7eb      	b.n	8001546 <__swsetup_r+0x1e>
 800156e:	4b24      	ldr	r3, [pc, #144]	; (8001600 <__swsetup_r+0xd8>)
 8001570:	429c      	cmp	r4, r3
 8001572:	bf08      	it	eq
 8001574:	68ec      	ldreq	r4, [r5, #12]
 8001576:	e7e6      	b.n	8001546 <__swsetup_r+0x1e>
 8001578:	0758      	lsls	r0, r3, #29
 800157a:	d512      	bpl.n	80015a2 <__swsetup_r+0x7a>
 800157c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800157e:	b141      	cbz	r1, 8001592 <__swsetup_r+0x6a>
 8001580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001584:	4299      	cmp	r1, r3
 8001586:	d002      	beq.n	800158e <__swsetup_r+0x66>
 8001588:	4630      	mov	r0, r6
 800158a:	f000 fa57 	bl	8001a3c <_free_r>
 800158e:	2300      	movs	r3, #0
 8001590:	6363      	str	r3, [r4, #52]	; 0x34
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001598:	81a3      	strh	r3, [r4, #12]
 800159a:	2300      	movs	r3, #0
 800159c:	6063      	str	r3, [r4, #4]
 800159e:	6923      	ldr	r3, [r4, #16]
 80015a0:	6023      	str	r3, [r4, #0]
 80015a2:	89a3      	ldrh	r3, [r4, #12]
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	81a3      	strh	r3, [r4, #12]
 80015aa:	6923      	ldr	r3, [r4, #16]
 80015ac:	b94b      	cbnz	r3, 80015c2 <__swsetup_r+0x9a>
 80015ae:	89a3      	ldrh	r3, [r4, #12]
 80015b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b8:	d003      	beq.n	80015c2 <__swsetup_r+0x9a>
 80015ba:	4621      	mov	r1, r4
 80015bc:	4630      	mov	r0, r6
 80015be:	f000 f9fd 	bl	80019bc <__smakebuf_r>
 80015c2:	89a0      	ldrh	r0, [r4, #12]
 80015c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015c8:	f010 0301 	ands.w	r3, r0, #1
 80015cc:	d00a      	beq.n	80015e4 <__swsetup_r+0xbc>
 80015ce:	2300      	movs	r3, #0
 80015d0:	60a3      	str	r3, [r4, #8]
 80015d2:	6963      	ldr	r3, [r4, #20]
 80015d4:	425b      	negs	r3, r3
 80015d6:	61a3      	str	r3, [r4, #24]
 80015d8:	6923      	ldr	r3, [r4, #16]
 80015da:	b943      	cbnz	r3, 80015ee <__swsetup_r+0xc6>
 80015dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015e0:	d1ba      	bne.n	8001558 <__swsetup_r+0x30>
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	0781      	lsls	r1, r0, #30
 80015e6:	bf58      	it	pl
 80015e8:	6963      	ldrpl	r3, [r4, #20]
 80015ea:	60a3      	str	r3, [r4, #8]
 80015ec:	e7f4      	b.n	80015d8 <__swsetup_r+0xb0>
 80015ee:	2000      	movs	r0, #0
 80015f0:	e7f7      	b.n	80015e2 <__swsetup_r+0xba>
 80015f2:	bf00      	nop
 80015f4:	20000000 	.word	0x20000000
 80015f8:	08001e70 	.word	0x08001e70
 80015fc:	08001e90 	.word	0x08001e90
 8001600:	08001e50 	.word	0x08001e50

08001604 <__sflush_r>:
 8001604:	898a      	ldrh	r2, [r1, #12]
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	4605      	mov	r5, r0
 800160c:	0710      	lsls	r0, r2, #28
 800160e:	460c      	mov	r4, r1
 8001610:	d458      	bmi.n	80016c4 <__sflush_r+0xc0>
 8001612:	684b      	ldr	r3, [r1, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dc05      	bgt.n	8001624 <__sflush_r+0x20>
 8001618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	dc02      	bgt.n	8001624 <__sflush_r+0x20>
 800161e:	2000      	movs	r0, #0
 8001620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001626:	2e00      	cmp	r6, #0
 8001628:	d0f9      	beq.n	800161e <__sflush_r+0x1a>
 800162a:	2300      	movs	r3, #0
 800162c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001630:	682f      	ldr	r7, [r5, #0]
 8001632:	602b      	str	r3, [r5, #0]
 8001634:	d032      	beq.n	800169c <__sflush_r+0x98>
 8001636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001638:	89a3      	ldrh	r3, [r4, #12]
 800163a:	075a      	lsls	r2, r3, #29
 800163c:	d505      	bpl.n	800164a <__sflush_r+0x46>
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	1ac0      	subs	r0, r0, r3
 8001642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001644:	b10b      	cbz	r3, 800164a <__sflush_r+0x46>
 8001646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001648:	1ac0      	subs	r0, r0, r3
 800164a:	2300      	movs	r3, #0
 800164c:	4602      	mov	r2, r0
 800164e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001650:	6a21      	ldr	r1, [r4, #32]
 8001652:	4628      	mov	r0, r5
 8001654:	47b0      	blx	r6
 8001656:	1c43      	adds	r3, r0, #1
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	d106      	bne.n	800166a <__sflush_r+0x66>
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	291d      	cmp	r1, #29
 8001660:	d82c      	bhi.n	80016bc <__sflush_r+0xb8>
 8001662:	4a2a      	ldr	r2, [pc, #168]	; (800170c <__sflush_r+0x108>)
 8001664:	40ca      	lsrs	r2, r1
 8001666:	07d6      	lsls	r6, r2, #31
 8001668:	d528      	bpl.n	80016bc <__sflush_r+0xb8>
 800166a:	2200      	movs	r2, #0
 800166c:	6062      	str	r2, [r4, #4]
 800166e:	04d9      	lsls	r1, r3, #19
 8001670:	6922      	ldr	r2, [r4, #16]
 8001672:	6022      	str	r2, [r4, #0]
 8001674:	d504      	bpl.n	8001680 <__sflush_r+0x7c>
 8001676:	1c42      	adds	r2, r0, #1
 8001678:	d101      	bne.n	800167e <__sflush_r+0x7a>
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	b903      	cbnz	r3, 8001680 <__sflush_r+0x7c>
 800167e:	6560      	str	r0, [r4, #84]	; 0x54
 8001680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001682:	602f      	str	r7, [r5, #0]
 8001684:	2900      	cmp	r1, #0
 8001686:	d0ca      	beq.n	800161e <__sflush_r+0x1a>
 8001688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800168c:	4299      	cmp	r1, r3
 800168e:	d002      	beq.n	8001696 <__sflush_r+0x92>
 8001690:	4628      	mov	r0, r5
 8001692:	f000 f9d3 	bl	8001a3c <_free_r>
 8001696:	2000      	movs	r0, #0
 8001698:	6360      	str	r0, [r4, #52]	; 0x34
 800169a:	e7c1      	b.n	8001620 <__sflush_r+0x1c>
 800169c:	6a21      	ldr	r1, [r4, #32]
 800169e:	2301      	movs	r3, #1
 80016a0:	4628      	mov	r0, r5
 80016a2:	47b0      	blx	r6
 80016a4:	1c41      	adds	r1, r0, #1
 80016a6:	d1c7      	bne.n	8001638 <__sflush_r+0x34>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0c4      	beq.n	8001638 <__sflush_r+0x34>
 80016ae:	2b1d      	cmp	r3, #29
 80016b0:	d001      	beq.n	80016b6 <__sflush_r+0xb2>
 80016b2:	2b16      	cmp	r3, #22
 80016b4:	d101      	bne.n	80016ba <__sflush_r+0xb6>
 80016b6:	602f      	str	r7, [r5, #0]
 80016b8:	e7b1      	b.n	800161e <__sflush_r+0x1a>
 80016ba:	89a3      	ldrh	r3, [r4, #12]
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c0:	81a3      	strh	r3, [r4, #12]
 80016c2:	e7ad      	b.n	8001620 <__sflush_r+0x1c>
 80016c4:	690f      	ldr	r7, [r1, #16]
 80016c6:	2f00      	cmp	r7, #0
 80016c8:	d0a9      	beq.n	800161e <__sflush_r+0x1a>
 80016ca:	0793      	lsls	r3, r2, #30
 80016cc:	680e      	ldr	r6, [r1, #0]
 80016ce:	bf08      	it	eq
 80016d0:	694b      	ldreq	r3, [r1, #20]
 80016d2:	600f      	str	r7, [r1, #0]
 80016d4:	bf18      	it	ne
 80016d6:	2300      	movne	r3, #0
 80016d8:	eba6 0807 	sub.w	r8, r6, r7
 80016dc:	608b      	str	r3, [r1, #8]
 80016de:	f1b8 0f00 	cmp.w	r8, #0
 80016e2:	dd9c      	ble.n	800161e <__sflush_r+0x1a>
 80016e4:	6a21      	ldr	r1, [r4, #32]
 80016e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016e8:	4643      	mov	r3, r8
 80016ea:	463a      	mov	r2, r7
 80016ec:	4628      	mov	r0, r5
 80016ee:	47b0      	blx	r6
 80016f0:	2800      	cmp	r0, #0
 80016f2:	dc06      	bgt.n	8001702 <__sflush_r+0xfe>
 80016f4:	89a3      	ldrh	r3, [r4, #12]
 80016f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fa:	81a3      	strh	r3, [r4, #12]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001700:	e78e      	b.n	8001620 <__sflush_r+0x1c>
 8001702:	4407      	add	r7, r0
 8001704:	eba8 0800 	sub.w	r8, r8, r0
 8001708:	e7e9      	b.n	80016de <__sflush_r+0xda>
 800170a:	bf00      	nop
 800170c:	20400001 	.word	0x20400001

08001710 <_fflush_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	4605      	mov	r5, r0
 8001716:	460c      	mov	r4, r1
 8001718:	b913      	cbnz	r3, 8001720 <_fflush_r+0x10>
 800171a:	2500      	movs	r5, #0
 800171c:	4628      	mov	r0, r5
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	b118      	cbz	r0, 800172a <_fflush_r+0x1a>
 8001722:	6983      	ldr	r3, [r0, #24]
 8001724:	b90b      	cbnz	r3, 800172a <_fflush_r+0x1a>
 8001726:	f000 f887 	bl	8001838 <__sinit>
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <_fflush_r+0x6c>)
 800172c:	429c      	cmp	r4, r3
 800172e:	d11b      	bne.n	8001768 <_fflush_r+0x58>
 8001730:	686c      	ldr	r4, [r5, #4]
 8001732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0ef      	beq.n	800171a <_fflush_r+0xa>
 800173a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800173c:	07d0      	lsls	r0, r2, #31
 800173e:	d404      	bmi.n	800174a <_fflush_r+0x3a>
 8001740:	0599      	lsls	r1, r3, #22
 8001742:	d402      	bmi.n	800174a <_fflush_r+0x3a>
 8001744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001746:	f7ff fba6 	bl	8000e96 <__retarget_lock_acquire_recursive>
 800174a:	4628      	mov	r0, r5
 800174c:	4621      	mov	r1, r4
 800174e:	f7ff ff59 	bl	8001604 <__sflush_r>
 8001752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001754:	07da      	lsls	r2, r3, #31
 8001756:	4605      	mov	r5, r0
 8001758:	d4e0      	bmi.n	800171c <_fflush_r+0xc>
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	059b      	lsls	r3, r3, #22
 800175e:	d4dd      	bmi.n	800171c <_fflush_r+0xc>
 8001760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001762:	f7ff fb99 	bl	8000e98 <__retarget_lock_release_recursive>
 8001766:	e7d9      	b.n	800171c <_fflush_r+0xc>
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <_fflush_r+0x70>)
 800176a:	429c      	cmp	r4, r3
 800176c:	d101      	bne.n	8001772 <_fflush_r+0x62>
 800176e:	68ac      	ldr	r4, [r5, #8]
 8001770:	e7df      	b.n	8001732 <_fflush_r+0x22>
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <_fflush_r+0x74>)
 8001774:	429c      	cmp	r4, r3
 8001776:	bf08      	it	eq
 8001778:	68ec      	ldreq	r4, [r5, #12]
 800177a:	e7da      	b.n	8001732 <_fflush_r+0x22>
 800177c:	08001e70 	.word	0x08001e70
 8001780:	08001e90 	.word	0x08001e90
 8001784:	08001e50 	.word	0x08001e50

08001788 <std>:
 8001788:	2300      	movs	r3, #0
 800178a:	b510      	push	{r4, lr}
 800178c:	4604      	mov	r4, r0
 800178e:	e9c0 3300 	strd	r3, r3, [r0]
 8001792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001796:	6083      	str	r3, [r0, #8]
 8001798:	8181      	strh	r1, [r0, #12]
 800179a:	6643      	str	r3, [r0, #100]	; 0x64
 800179c:	81c2      	strh	r2, [r0, #14]
 800179e:	6183      	str	r3, [r0, #24]
 80017a0:	4619      	mov	r1, r3
 80017a2:	2208      	movs	r2, #8
 80017a4:	305c      	adds	r0, #92	; 0x5c
 80017a6:	f7ff fb78 	bl	8000e9a <memset>
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <std+0x38>)
 80017ac:	6263      	str	r3, [r4, #36]	; 0x24
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <std+0x3c>)
 80017b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <std+0x40>)
 80017b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <std+0x44>)
 80017b8:	6224      	str	r4, [r4, #32]
 80017ba:	6323      	str	r3, [r4, #48]	; 0x30
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	08001c1d 	.word	0x08001c1d
 80017c4:	08001c3f 	.word	0x08001c3f
 80017c8:	08001c77 	.word	0x08001c77
 80017cc:	08001c9b 	.word	0x08001c9b

080017d0 <_cleanup_r>:
 80017d0:	4901      	ldr	r1, [pc, #4]	; (80017d8 <_cleanup_r+0x8>)
 80017d2:	f000 b8af 	b.w	8001934 <_fwalk_reent>
 80017d6:	bf00      	nop
 80017d8:	08001711 	.word	0x08001711

080017dc <__sfmoreglue>:
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	2268      	movs	r2, #104	; 0x68
 80017e0:	1e4d      	subs	r5, r1, #1
 80017e2:	4355      	muls	r5, r2
 80017e4:	460e      	mov	r6, r1
 80017e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80017ea:	f000 f993 	bl	8001b14 <_malloc_r>
 80017ee:	4604      	mov	r4, r0
 80017f0:	b140      	cbz	r0, 8001804 <__sfmoreglue+0x28>
 80017f2:	2100      	movs	r1, #0
 80017f4:	e9c0 1600 	strd	r1, r6, [r0]
 80017f8:	300c      	adds	r0, #12
 80017fa:	60a0      	str	r0, [r4, #8]
 80017fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001800:	f7ff fb4b 	bl	8000e9a <memset>
 8001804:	4620      	mov	r0, r4
 8001806:	bd70      	pop	{r4, r5, r6, pc}

08001808 <__sfp_lock_acquire>:
 8001808:	4801      	ldr	r0, [pc, #4]	; (8001810 <__sfp_lock_acquire+0x8>)
 800180a:	f7ff bb44 	b.w	8000e96 <__retarget_lock_acquire_recursive>
 800180e:	bf00      	nop
 8001810:	20001175 	.word	0x20001175

08001814 <__sfp_lock_release>:
 8001814:	4801      	ldr	r0, [pc, #4]	; (800181c <__sfp_lock_release+0x8>)
 8001816:	f7ff bb3f 	b.w	8000e98 <__retarget_lock_release_recursive>
 800181a:	bf00      	nop
 800181c:	20001175 	.word	0x20001175

08001820 <__sinit_lock_acquire>:
 8001820:	4801      	ldr	r0, [pc, #4]	; (8001828 <__sinit_lock_acquire+0x8>)
 8001822:	f7ff bb38 	b.w	8000e96 <__retarget_lock_acquire_recursive>
 8001826:	bf00      	nop
 8001828:	20001176 	.word	0x20001176

0800182c <__sinit_lock_release>:
 800182c:	4801      	ldr	r0, [pc, #4]	; (8001834 <__sinit_lock_release+0x8>)
 800182e:	f7ff bb33 	b.w	8000e98 <__retarget_lock_release_recursive>
 8001832:	bf00      	nop
 8001834:	20001176 	.word	0x20001176

08001838 <__sinit>:
 8001838:	b510      	push	{r4, lr}
 800183a:	4604      	mov	r4, r0
 800183c:	f7ff fff0 	bl	8001820 <__sinit_lock_acquire>
 8001840:	69a3      	ldr	r3, [r4, #24]
 8001842:	b11b      	cbz	r3, 800184c <__sinit+0x14>
 8001844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001848:	f7ff bff0 	b.w	800182c <__sinit_lock_release>
 800184c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001850:	6523      	str	r3, [r4, #80]	; 0x50
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <__sinit+0x68>)
 8001854:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <__sinit+0x6c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	62a2      	str	r2, [r4, #40]	; 0x28
 800185a:	42a3      	cmp	r3, r4
 800185c:	bf04      	itt	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	61a3      	streq	r3, [r4, #24]
 8001862:	4620      	mov	r0, r4
 8001864:	f000 f820 	bl	80018a8 <__sfp>
 8001868:	6060      	str	r0, [r4, #4]
 800186a:	4620      	mov	r0, r4
 800186c:	f000 f81c 	bl	80018a8 <__sfp>
 8001870:	60a0      	str	r0, [r4, #8]
 8001872:	4620      	mov	r0, r4
 8001874:	f000 f818 	bl	80018a8 <__sfp>
 8001878:	2200      	movs	r2, #0
 800187a:	60e0      	str	r0, [r4, #12]
 800187c:	2104      	movs	r1, #4
 800187e:	6860      	ldr	r0, [r4, #4]
 8001880:	f7ff ff82 	bl	8001788 <std>
 8001884:	68a0      	ldr	r0, [r4, #8]
 8001886:	2201      	movs	r2, #1
 8001888:	2109      	movs	r1, #9
 800188a:	f7ff ff7d 	bl	8001788 <std>
 800188e:	68e0      	ldr	r0, [r4, #12]
 8001890:	2202      	movs	r2, #2
 8001892:	2112      	movs	r1, #18
 8001894:	f7ff ff78 	bl	8001788 <std>
 8001898:	2301      	movs	r3, #1
 800189a:	61a3      	str	r3, [r4, #24]
 800189c:	e7d2      	b.n	8001844 <__sinit+0xc>
 800189e:	bf00      	nop
 80018a0:	08001e18 	.word	0x08001e18
 80018a4:	080017d1 	.word	0x080017d1

080018a8 <__sfp>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	4607      	mov	r7, r0
 80018ac:	f7ff ffac 	bl	8001808 <__sfp_lock_acquire>
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <__sfp+0x84>)
 80018b2:	681e      	ldr	r6, [r3, #0]
 80018b4:	69b3      	ldr	r3, [r6, #24]
 80018b6:	b913      	cbnz	r3, 80018be <__sfp+0x16>
 80018b8:	4630      	mov	r0, r6
 80018ba:	f7ff ffbd 	bl	8001838 <__sinit>
 80018be:	3648      	adds	r6, #72	; 0x48
 80018c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	d503      	bpl.n	80018d0 <__sfp+0x28>
 80018c8:	6833      	ldr	r3, [r6, #0]
 80018ca:	b30b      	cbz	r3, 8001910 <__sfp+0x68>
 80018cc:	6836      	ldr	r6, [r6, #0]
 80018ce:	e7f7      	b.n	80018c0 <__sfp+0x18>
 80018d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018d4:	b9d5      	cbnz	r5, 800190c <__sfp+0x64>
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <__sfp+0x88>)
 80018d8:	60e3      	str	r3, [r4, #12]
 80018da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80018de:	6665      	str	r5, [r4, #100]	; 0x64
 80018e0:	f7ff fad8 	bl	8000e94 <__retarget_lock_init_recursive>
 80018e4:	f7ff ff96 	bl	8001814 <__sfp_lock_release>
 80018e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018f0:	6025      	str	r5, [r4, #0]
 80018f2:	61a5      	str	r5, [r4, #24]
 80018f4:	2208      	movs	r2, #8
 80018f6:	4629      	mov	r1, r5
 80018f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018fc:	f7ff facd 	bl	8000e9a <memset>
 8001900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001908:	4620      	mov	r0, r4
 800190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800190c:	3468      	adds	r4, #104	; 0x68
 800190e:	e7d9      	b.n	80018c4 <__sfp+0x1c>
 8001910:	2104      	movs	r1, #4
 8001912:	4638      	mov	r0, r7
 8001914:	f7ff ff62 	bl	80017dc <__sfmoreglue>
 8001918:	4604      	mov	r4, r0
 800191a:	6030      	str	r0, [r6, #0]
 800191c:	2800      	cmp	r0, #0
 800191e:	d1d5      	bne.n	80018cc <__sfp+0x24>
 8001920:	f7ff ff78 	bl	8001814 <__sfp_lock_release>
 8001924:	230c      	movs	r3, #12
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	e7ee      	b.n	8001908 <__sfp+0x60>
 800192a:	bf00      	nop
 800192c:	08001e18 	.word	0x08001e18
 8001930:	ffff0001 	.word	0xffff0001

08001934 <_fwalk_reent>:
 8001934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001938:	4606      	mov	r6, r0
 800193a:	4688      	mov	r8, r1
 800193c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001940:	2700      	movs	r7, #0
 8001942:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001946:	f1b9 0901 	subs.w	r9, r9, #1
 800194a:	d505      	bpl.n	8001958 <_fwalk_reent+0x24>
 800194c:	6824      	ldr	r4, [r4, #0]
 800194e:	2c00      	cmp	r4, #0
 8001950:	d1f7      	bne.n	8001942 <_fwalk_reent+0xe>
 8001952:	4638      	mov	r0, r7
 8001954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001958:	89ab      	ldrh	r3, [r5, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d907      	bls.n	800196e <_fwalk_reent+0x3a>
 800195e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001962:	3301      	adds	r3, #1
 8001964:	d003      	beq.n	800196e <_fwalk_reent+0x3a>
 8001966:	4629      	mov	r1, r5
 8001968:	4630      	mov	r0, r6
 800196a:	47c0      	blx	r8
 800196c:	4307      	orrs	r7, r0
 800196e:	3568      	adds	r5, #104	; 0x68
 8001970:	e7e9      	b.n	8001946 <_fwalk_reent+0x12>

08001972 <__swhatbuf_r>:
 8001972:	b570      	push	{r4, r5, r6, lr}
 8001974:	460e      	mov	r6, r1
 8001976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800197a:	2900      	cmp	r1, #0
 800197c:	b096      	sub	sp, #88	; 0x58
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	da08      	bge.n	8001996 <__swhatbuf_r+0x24>
 8001984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	602a      	str	r2, [r5, #0]
 800198c:	061a      	lsls	r2, r3, #24
 800198e:	d410      	bmi.n	80019b2 <__swhatbuf_r+0x40>
 8001990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001994:	e00e      	b.n	80019b4 <__swhatbuf_r+0x42>
 8001996:	466a      	mov	r2, sp
 8001998:	f000 f9a6 	bl	8001ce8 <_fstat_r>
 800199c:	2800      	cmp	r0, #0
 800199e:	dbf1      	blt.n	8001984 <__swhatbuf_r+0x12>
 80019a0:	9a01      	ldr	r2, [sp, #4]
 80019a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80019a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80019aa:	425a      	negs	r2, r3
 80019ac:	415a      	adcs	r2, r3
 80019ae:	602a      	str	r2, [r5, #0]
 80019b0:	e7ee      	b.n	8001990 <__swhatbuf_r+0x1e>
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	2000      	movs	r0, #0
 80019b6:	6023      	str	r3, [r4, #0]
 80019b8:	b016      	add	sp, #88	; 0x58
 80019ba:	bd70      	pop	{r4, r5, r6, pc}

080019bc <__smakebuf_r>:
 80019bc:	898b      	ldrh	r3, [r1, #12]
 80019be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019c0:	079d      	lsls	r5, r3, #30
 80019c2:	4606      	mov	r6, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	d507      	bpl.n	80019d8 <__smakebuf_r+0x1c>
 80019c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80019cc:	6023      	str	r3, [r4, #0]
 80019ce:	6123      	str	r3, [r4, #16]
 80019d0:	2301      	movs	r3, #1
 80019d2:	6163      	str	r3, [r4, #20]
 80019d4:	b002      	add	sp, #8
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
 80019d8:	ab01      	add	r3, sp, #4
 80019da:	466a      	mov	r2, sp
 80019dc:	f7ff ffc9 	bl	8001972 <__swhatbuf_r>
 80019e0:	9900      	ldr	r1, [sp, #0]
 80019e2:	4605      	mov	r5, r0
 80019e4:	4630      	mov	r0, r6
 80019e6:	f000 f895 	bl	8001b14 <_malloc_r>
 80019ea:	b948      	cbnz	r0, 8001a00 <__smakebuf_r+0x44>
 80019ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019f0:	059a      	lsls	r2, r3, #22
 80019f2:	d4ef      	bmi.n	80019d4 <__smakebuf_r+0x18>
 80019f4:	f023 0303 	bic.w	r3, r3, #3
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	81a3      	strh	r3, [r4, #12]
 80019fe:	e7e3      	b.n	80019c8 <__smakebuf_r+0xc>
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <__smakebuf_r+0x7c>)
 8001a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8001a04:	89a3      	ldrh	r3, [r4, #12]
 8001a06:	6020      	str	r0, [r4, #0]
 8001a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	9b00      	ldr	r3, [sp, #0]
 8001a10:	6163      	str	r3, [r4, #20]
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	6120      	str	r0, [r4, #16]
 8001a16:	b15b      	cbz	r3, 8001a30 <__smakebuf_r+0x74>
 8001a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a1c:	4630      	mov	r0, r6
 8001a1e:	f000 f975 	bl	8001d0c <_isatty_r>
 8001a22:	b128      	cbz	r0, 8001a30 <__smakebuf_r+0x74>
 8001a24:	89a3      	ldrh	r3, [r4, #12]
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	81a3      	strh	r3, [r4, #12]
 8001a30:	89a0      	ldrh	r0, [r4, #12]
 8001a32:	4305      	orrs	r5, r0
 8001a34:	81a5      	strh	r5, [r4, #12]
 8001a36:	e7cd      	b.n	80019d4 <__smakebuf_r+0x18>
 8001a38:	080017d1 	.word	0x080017d1

08001a3c <_free_r>:
 8001a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a3e:	2900      	cmp	r1, #0
 8001a40:	d044      	beq.n	8001acc <_free_r+0x90>
 8001a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a46:	9001      	str	r0, [sp, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8001a4e:	bfb8      	it	lt
 8001a50:	18e4      	addlt	r4, r4, r3
 8001a52:	f000 f97d 	bl	8001d50 <__malloc_lock>
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <_free_r+0x94>)
 8001a58:	9801      	ldr	r0, [sp, #4]
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	b933      	cbnz	r3, 8001a6c <_free_r+0x30>
 8001a5e:	6063      	str	r3, [r4, #4]
 8001a60:	6014      	str	r4, [r2, #0]
 8001a62:	b003      	add	sp, #12
 8001a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a68:	f000 b978 	b.w	8001d5c <__malloc_unlock>
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	d908      	bls.n	8001a82 <_free_r+0x46>
 8001a70:	6825      	ldr	r5, [r4, #0]
 8001a72:	1961      	adds	r1, r4, r5
 8001a74:	428b      	cmp	r3, r1
 8001a76:	bf01      	itttt	eq
 8001a78:	6819      	ldreq	r1, [r3, #0]
 8001a7a:	685b      	ldreq	r3, [r3, #4]
 8001a7c:	1949      	addeq	r1, r1, r5
 8001a7e:	6021      	streq	r1, [r4, #0]
 8001a80:	e7ed      	b.n	8001a5e <_free_r+0x22>
 8001a82:	461a      	mov	r2, r3
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	b10b      	cbz	r3, 8001a8c <_free_r+0x50>
 8001a88:	42a3      	cmp	r3, r4
 8001a8a:	d9fa      	bls.n	8001a82 <_free_r+0x46>
 8001a8c:	6811      	ldr	r1, [r2, #0]
 8001a8e:	1855      	adds	r5, r2, r1
 8001a90:	42a5      	cmp	r5, r4
 8001a92:	d10b      	bne.n	8001aac <_free_r+0x70>
 8001a94:	6824      	ldr	r4, [r4, #0]
 8001a96:	4421      	add	r1, r4
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	d1e0      	bne.n	8001a62 <_free_r+0x26>
 8001aa0:	681c      	ldr	r4, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	4421      	add	r1, r4
 8001aa8:	6011      	str	r1, [r2, #0]
 8001aaa:	e7da      	b.n	8001a62 <_free_r+0x26>
 8001aac:	d902      	bls.n	8001ab4 <_free_r+0x78>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	6003      	str	r3, [r0, #0]
 8001ab2:	e7d6      	b.n	8001a62 <_free_r+0x26>
 8001ab4:	6825      	ldr	r5, [r4, #0]
 8001ab6:	1961      	adds	r1, r4, r5
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	bf04      	itt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	685b      	ldreq	r3, [r3, #4]
 8001ac0:	6063      	str	r3, [r4, #4]
 8001ac2:	bf04      	itt	eq
 8001ac4:	1949      	addeq	r1, r1, r5
 8001ac6:	6021      	streq	r1, [r4, #0]
 8001ac8:	6054      	str	r4, [r2, #4]
 8001aca:	e7ca      	b.n	8001a62 <_free_r+0x26>
 8001acc:	b003      	add	sp, #12
 8001ace:	bd30      	pop	{r4, r5, pc}
 8001ad0:	20001178 	.word	0x20001178

08001ad4 <sbrk_aligned>:
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	4e0e      	ldr	r6, [pc, #56]	; (8001b10 <sbrk_aligned+0x3c>)
 8001ad8:	460c      	mov	r4, r1
 8001ada:	6831      	ldr	r1, [r6, #0]
 8001adc:	4605      	mov	r5, r0
 8001ade:	b911      	cbnz	r1, 8001ae6 <sbrk_aligned+0x12>
 8001ae0:	f000 f88c 	bl	8001bfc <_sbrk_r>
 8001ae4:	6030      	str	r0, [r6, #0]
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f000 f887 	bl	8001bfc <_sbrk_r>
 8001aee:	1c43      	adds	r3, r0, #1
 8001af0:	d00a      	beq.n	8001b08 <sbrk_aligned+0x34>
 8001af2:	1cc4      	adds	r4, r0, #3
 8001af4:	f024 0403 	bic.w	r4, r4, #3
 8001af8:	42a0      	cmp	r0, r4
 8001afa:	d007      	beq.n	8001b0c <sbrk_aligned+0x38>
 8001afc:	1a21      	subs	r1, r4, r0
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 f87c 	bl	8001bfc <_sbrk_r>
 8001b04:	3001      	adds	r0, #1
 8001b06:	d101      	bne.n	8001b0c <sbrk_aligned+0x38>
 8001b08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}
 8001b10:	2000117c 	.word	0x2000117c

08001b14 <_malloc_r>:
 8001b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4607      	mov	r7, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d905      	bls.n	8001b3c <_malloc_r+0x28>
 8001b30:	230c      	movs	r3, #12
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	2600      	movs	r6, #0
 8001b36:	4630      	mov	r0, r6
 8001b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b3c:	4e2e      	ldr	r6, [pc, #184]	; (8001bf8 <_malloc_r+0xe4>)
 8001b3e:	f000 f907 	bl	8001d50 <__malloc_lock>
 8001b42:	6833      	ldr	r3, [r6, #0]
 8001b44:	461c      	mov	r4, r3
 8001b46:	bb34      	cbnz	r4, 8001b96 <_malloc_r+0x82>
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f7ff ffc2 	bl	8001ad4 <sbrk_aligned>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	4604      	mov	r4, r0
 8001b54:	d14d      	bne.n	8001bf2 <_malloc_r+0xde>
 8001b56:	6834      	ldr	r4, [r6, #0]
 8001b58:	4626      	mov	r6, r4
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	d140      	bne.n	8001be0 <_malloc_r+0xcc>
 8001b5e:	6823      	ldr	r3, [r4, #0]
 8001b60:	4631      	mov	r1, r6
 8001b62:	4638      	mov	r0, r7
 8001b64:	eb04 0803 	add.w	r8, r4, r3
 8001b68:	f000 f848 	bl	8001bfc <_sbrk_r>
 8001b6c:	4580      	cmp	r8, r0
 8001b6e:	d13a      	bne.n	8001be6 <_malloc_r+0xd2>
 8001b70:	6821      	ldr	r1, [r4, #0]
 8001b72:	3503      	adds	r5, #3
 8001b74:	1a6d      	subs	r5, r5, r1
 8001b76:	f025 0503 	bic.w	r5, r5, #3
 8001b7a:	3508      	adds	r5, #8
 8001b7c:	2d0c      	cmp	r5, #12
 8001b7e:	bf38      	it	cc
 8001b80:	250c      	movcc	r5, #12
 8001b82:	4629      	mov	r1, r5
 8001b84:	4638      	mov	r0, r7
 8001b86:	f7ff ffa5 	bl	8001ad4 <sbrk_aligned>
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d02b      	beq.n	8001be6 <_malloc_r+0xd2>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	442b      	add	r3, r5
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	e00e      	b.n	8001bb4 <_malloc_r+0xa0>
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	1b52      	subs	r2, r2, r5
 8001b9a:	d41e      	bmi.n	8001bda <_malloc_r+0xc6>
 8001b9c:	2a0b      	cmp	r2, #11
 8001b9e:	d916      	bls.n	8001bce <_malloc_r+0xba>
 8001ba0:	1961      	adds	r1, r4, r5
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	6025      	str	r5, [r4, #0]
 8001ba6:	bf18      	it	ne
 8001ba8:	6059      	strne	r1, [r3, #4]
 8001baa:	6863      	ldr	r3, [r4, #4]
 8001bac:	bf08      	it	eq
 8001bae:	6031      	streq	r1, [r6, #0]
 8001bb0:	5162      	str	r2, [r4, r5]
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	4638      	mov	r0, r7
 8001bb6:	f104 060b 	add.w	r6, r4, #11
 8001bba:	f000 f8cf 	bl	8001d5c <__malloc_unlock>
 8001bbe:	f026 0607 	bic.w	r6, r6, #7
 8001bc2:	1d23      	adds	r3, r4, #4
 8001bc4:	1af2      	subs	r2, r6, r3
 8001bc6:	d0b6      	beq.n	8001b36 <_malloc_r+0x22>
 8001bc8:	1b9b      	subs	r3, r3, r6
 8001bca:	50a3      	str	r3, [r4, r2]
 8001bcc:	e7b3      	b.n	8001b36 <_malloc_r+0x22>
 8001bce:	6862      	ldr	r2, [r4, #4]
 8001bd0:	42a3      	cmp	r3, r4
 8001bd2:	bf0c      	ite	eq
 8001bd4:	6032      	streq	r2, [r6, #0]
 8001bd6:	605a      	strne	r2, [r3, #4]
 8001bd8:	e7ec      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bda:	4623      	mov	r3, r4
 8001bdc:	6864      	ldr	r4, [r4, #4]
 8001bde:	e7b2      	b.n	8001b46 <_malloc_r+0x32>
 8001be0:	4634      	mov	r4, r6
 8001be2:	6876      	ldr	r6, [r6, #4]
 8001be4:	e7b9      	b.n	8001b5a <_malloc_r+0x46>
 8001be6:	230c      	movs	r3, #12
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4638      	mov	r0, r7
 8001bec:	f000 f8b6 	bl	8001d5c <__malloc_unlock>
 8001bf0:	e7a1      	b.n	8001b36 <_malloc_r+0x22>
 8001bf2:	6025      	str	r5, [r4, #0]
 8001bf4:	e7de      	b.n	8001bb4 <_malloc_r+0xa0>
 8001bf6:	bf00      	nop
 8001bf8:	20001178 	.word	0x20001178

08001bfc <_sbrk_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4d06      	ldr	r5, [pc, #24]	; (8001c18 <_sbrk_r+0x1c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	602b      	str	r3, [r5, #0]
 8001c08:	f7fe ff70 	bl	8000aec <_sbrk>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_sbrk_r+0x1a>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_sbrk_r+0x1a>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20001180 	.word	0x20001180

08001c1c <__sread>:
 8001c1c:	b510      	push	{r4, lr}
 8001c1e:	460c      	mov	r4, r1
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	f000 f8a0 	bl	8001d68 <_read_r>
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	bfab      	itete	ge
 8001c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001c30:	181b      	addge	r3, r3, r0
 8001c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c36:	bfac      	ite	ge
 8001c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c3a:	81a3      	strhlt	r3, [r4, #12]
 8001c3c:	bd10      	pop	{r4, pc}

08001c3e <__swrite>:
 8001c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c42:	461f      	mov	r7, r3
 8001c44:	898b      	ldrh	r3, [r1, #12]
 8001c46:	05db      	lsls	r3, r3, #23
 8001c48:	4605      	mov	r5, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	4616      	mov	r6, r2
 8001c4e:	d505      	bpl.n	8001c5c <__swrite+0x1e>
 8001c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c54:	2302      	movs	r3, #2
 8001c56:	2200      	movs	r2, #0
 8001c58:	f000 f868 	bl	8001d2c <_lseek_r>
 8001c5c:	89a3      	ldrh	r3, [r4, #12]
 8001c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c66:	81a3      	strh	r3, [r4, #12]
 8001c68:	4632      	mov	r2, r6
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c72:	f000 b817 	b.w	8001ca4 <_write_r>

08001c76 <__sseek>:
 8001c76:	b510      	push	{r4, lr}
 8001c78:	460c      	mov	r4, r1
 8001c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c7e:	f000 f855 	bl	8001d2c <_lseek_r>
 8001c82:	1c43      	adds	r3, r0, #1
 8001c84:	89a3      	ldrh	r3, [r4, #12]
 8001c86:	bf15      	itete	ne
 8001c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c92:	81a3      	strheq	r3, [r4, #12]
 8001c94:	bf18      	it	ne
 8001c96:	81a3      	strhne	r3, [r4, #12]
 8001c98:	bd10      	pop	{r4, pc}

08001c9a <__sclose>:
 8001c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c9e:	f000 b813 	b.w	8001cc8 <_close_r>
	...

08001ca4 <_write_r>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4d07      	ldr	r5, [pc, #28]	; (8001cc4 <_write_r+0x20>)
 8001ca8:	4604      	mov	r4, r0
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	602a      	str	r2, [r5, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7fe fec9 	bl	8000a4a <_write>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_write_r+0x1e>
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_write_r+0x1e>
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	20001180 	.word	0x20001180

08001cc8 <_close_r>:
 8001cc8:	b538      	push	{r3, r4, r5, lr}
 8001cca:	4d06      	ldr	r5, [pc, #24]	; (8001ce4 <_close_r+0x1c>)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	f7fe fed5 	bl	8000a82 <_close>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d102      	bne.n	8001ce2 <_close_r+0x1a>
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	b103      	cbz	r3, 8001ce2 <_close_r+0x1a>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	20001180 	.word	0x20001180

08001ce8 <_fstat_r>:
 8001ce8:	b538      	push	{r3, r4, r5, lr}
 8001cea:	4d07      	ldr	r5, [pc, #28]	; (8001d08 <_fstat_r+0x20>)
 8001cec:	2300      	movs	r3, #0
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	602b      	str	r3, [r5, #0]
 8001cf6:	f7fe fed0 	bl	8000a9a <_fstat>
 8001cfa:	1c43      	adds	r3, r0, #1
 8001cfc:	d102      	bne.n	8001d04 <_fstat_r+0x1c>
 8001cfe:	682b      	ldr	r3, [r5, #0]
 8001d00:	b103      	cbz	r3, 8001d04 <_fstat_r+0x1c>
 8001d02:	6023      	str	r3, [r4, #0]
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	bf00      	nop
 8001d08:	20001180 	.word	0x20001180

08001d0c <_isatty_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d06      	ldr	r5, [pc, #24]	; (8001d28 <_isatty_r+0x1c>)
 8001d10:	2300      	movs	r3, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7fe fecf 	bl	8000aba <_isatty>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_isatty_r+0x1a>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_isatty_r+0x1a>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	20001180 	.word	0x20001180

08001d2c <_lseek_r>:
 8001d2c:	b538      	push	{r3, r4, r5, lr}
 8001d2e:	4d07      	ldr	r5, [pc, #28]	; (8001d4c <_lseek_r+0x20>)
 8001d30:	4604      	mov	r4, r0
 8001d32:	4608      	mov	r0, r1
 8001d34:	4611      	mov	r1, r2
 8001d36:	2200      	movs	r2, #0
 8001d38:	602a      	str	r2, [r5, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f7fe fec8 	bl	8000ad0 <_lseek>
 8001d40:	1c43      	adds	r3, r0, #1
 8001d42:	d102      	bne.n	8001d4a <_lseek_r+0x1e>
 8001d44:	682b      	ldr	r3, [r5, #0]
 8001d46:	b103      	cbz	r3, 8001d4a <_lseek_r+0x1e>
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	bd38      	pop	{r3, r4, r5, pc}
 8001d4c:	20001180 	.word	0x20001180

08001d50 <__malloc_lock>:
 8001d50:	4801      	ldr	r0, [pc, #4]	; (8001d58 <__malloc_lock+0x8>)
 8001d52:	f7ff b8a0 	b.w	8000e96 <__retarget_lock_acquire_recursive>
 8001d56:	bf00      	nop
 8001d58:	20001174 	.word	0x20001174

08001d5c <__malloc_unlock>:
 8001d5c:	4801      	ldr	r0, [pc, #4]	; (8001d64 <__malloc_unlock+0x8>)
 8001d5e:	f7ff b89b 	b.w	8000e98 <__retarget_lock_release_recursive>
 8001d62:	bf00      	nop
 8001d64:	20001174 	.word	0x20001174

08001d68 <_read_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4d07      	ldr	r5, [pc, #28]	; (8001d88 <_read_r+0x20>)
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	602a      	str	r2, [r5, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f7fe fe4a 	bl	8000a10 <_read>
 8001d7c:	1c43      	adds	r3, r0, #1
 8001d7e:	d102      	bne.n	8001d86 <_read_r+0x1e>
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	b103      	cbz	r3, 8001d86 <_read_r+0x1e>
 8001d84:	6023      	str	r3, [r4, #0]
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	20001180 	.word	0x20001180

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
